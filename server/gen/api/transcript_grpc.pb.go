// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: transcript.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TranscriptService_GetTranscript_FullMethodName                  = "/rsk.TranscriptService/GetTranscript"
	TranscriptService_GetTranscriptDialog_FullMethodName            = "/rsk.TranscriptService/GetTranscriptDialog"
	TranscriptService_ListTranscripts_FullMethodName                = "/rsk.TranscriptService/ListTranscripts"
	TranscriptService_ListChunkedTranscripts_FullMethodName         = "/rsk.TranscriptService/ListChunkedTranscripts"
	TranscriptService_GetChunkedTranscriptChunkStats_FullMethodName = "/rsk.TranscriptService/GetChunkedTranscriptChunkStats"
	TranscriptService_ListTranscriptChunks_FullMethodName           = "/rsk.TranscriptService/ListTranscriptChunks"
	TranscriptService_GetTranscriptChunk_FullMethodName             = "/rsk.TranscriptService/GetTranscriptChunk"
	TranscriptService_ListChunkContributions_FullMethodName         = "/rsk.TranscriptService/ListChunkContributions"
	TranscriptService_CreateChunkContribution_FullMethodName        = "/rsk.TranscriptService/CreateChunkContribution"
	TranscriptService_GetChunkContribution_FullMethodName           = "/rsk.TranscriptService/GetChunkContribution"
	TranscriptService_UpdateChunkContribution_FullMethodName        = "/rsk.TranscriptService/UpdateChunkContribution"
	TranscriptService_DeleteChunkContribution_FullMethodName        = "/rsk.TranscriptService/DeleteChunkContribution"
	TranscriptService_RequestChunkContributionState_FullMethodName  = "/rsk.TranscriptService/RequestChunkContributionState"
	TranscriptService_ListTranscriptChanges_FullMethodName          = "/rsk.TranscriptService/ListTranscriptChanges"
	TranscriptService_GetTranscriptChange_FullMethodName            = "/rsk.TranscriptService/GetTranscriptChange"
	TranscriptService_GetTranscriptChangeDiff_FullMethodName        = "/rsk.TranscriptService/GetTranscriptChangeDiff"
	TranscriptService_CreateTranscriptChange_FullMethodName         = "/rsk.TranscriptService/CreateTranscriptChange"
	TranscriptService_UpdateTranscriptChange_FullMethodName         = "/rsk.TranscriptService/UpdateTranscriptChange"
	TranscriptService_DeleteTranscriptChange_FullMethodName         = "/rsk.TranscriptService/DeleteTranscriptChange"
	TranscriptService_RequestTranscriptChangeState_FullMethodName   = "/rsk.TranscriptService/RequestTranscriptChangeState"
	TranscriptService_SetTranscriptRatingScore_FullMethodName       = "/rsk.TranscriptService/SetTranscriptRatingScore"
	TranscriptService_BulkSetTranscriptRatingScore_FullMethodName   = "/rsk.TranscriptService/BulkSetTranscriptRatingScore"
	TranscriptService_BulkSetTranscriptTags_FullMethodName          = "/rsk.TranscriptService/BulkSetTranscriptTags"
)

// TranscriptServiceClient is the client API for TranscriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranscriptServiceClient interface {
	GetTranscript(ctx context.Context, in *GetTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error)
	GetTranscriptDialog(ctx context.Context, in *GetTranscriptDialogRequest, opts ...grpc.CallOption) (*TranscriptDialog, error)
	ListTranscripts(ctx context.Context, in *ListTranscriptsRequest, opts ...grpc.CallOption) (*TranscriptList, error)
	ListChunkedTranscripts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChunkedTranscriptList, error)
	GetChunkedTranscriptChunkStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChunkStats, error)
	ListTranscriptChunks(ctx context.Context, in *ListTranscriptChunksRequest, opts ...grpc.CallOption) (*TranscriptChunkList, error)
	GetTranscriptChunk(ctx context.Context, in *GetTranscriptChunkRequest, opts ...grpc.CallOption) (*Chunk, error)
	ListChunkContributions(ctx context.Context, in *ListChunkContributionsRequest, opts ...grpc.CallOption) (*ChunkContributionList, error)
	CreateChunkContribution(ctx context.Context, in *CreateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	GetChunkContribution(ctx context.Context, in *GetChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	UpdateChunkContribution(ctx context.Context, in *UpdateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	DeleteChunkContribution(ctx context.Context, in *DeleteChunkContributionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestChunkContributionState(ctx context.Context, in *RequestChunkContributionStateRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	ListTranscriptChanges(ctx context.Context, in *ListTranscriptChangesRequest, opts ...grpc.CallOption) (*TranscriptChangeList, error)
	GetTranscriptChange(ctx context.Context, in *GetTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error)
	GetTranscriptChangeDiff(ctx context.Context, in *GetTranscriptChangeDiffRequest, opts ...grpc.CallOption) (*TranscriptChangeDiff, error)
	CreateTranscriptChange(ctx context.Context, in *CreateTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error)
	UpdateTranscriptChange(ctx context.Context, in *UpdateTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error)
	DeleteTranscriptChange(ctx context.Context, in *DeleteTranscriptChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestTranscriptChangeState(ctx context.Context, in *RequestTranscriptChangeStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetTranscriptRatingScore(ctx context.Context, in *SetTranscriptRatingScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkSetTranscriptRatingScore(ctx context.Context, in *BulkSetTranscriptRatingScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkSetTranscriptTags(ctx context.Context, in *BulkSetTranscriptTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type transcriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscriptServiceClient(cc grpc.ClientConnInterface) TranscriptServiceClient {
	return &transcriptServiceClient{cc}
}

func (c *transcriptServiceClient) GetTranscript(ctx context.Context, in *GetTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transcript)
	err := c.cc.Invoke(ctx, TranscriptService_GetTranscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) GetTranscriptDialog(ctx context.Context, in *GetTranscriptDialogRequest, opts ...grpc.CallOption) (*TranscriptDialog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptDialog)
	err := c.cc.Invoke(ctx, TranscriptService_GetTranscriptDialog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) ListTranscripts(ctx context.Context, in *ListTranscriptsRequest, opts ...grpc.CallOption) (*TranscriptList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptList)
	err := c.cc.Invoke(ctx, TranscriptService_ListTranscripts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) ListChunkedTranscripts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChunkedTranscriptList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkedTranscriptList)
	err := c.cc.Invoke(ctx, TranscriptService_ListChunkedTranscripts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) GetChunkedTranscriptChunkStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChunkStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkStats)
	err := c.cc.Invoke(ctx, TranscriptService_GetChunkedTranscriptChunkStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) ListTranscriptChunks(ctx context.Context, in *ListTranscriptChunksRequest, opts ...grpc.CallOption) (*TranscriptChunkList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptChunkList)
	err := c.cc.Invoke(ctx, TranscriptService_ListTranscriptChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) GetTranscriptChunk(ctx context.Context, in *GetTranscriptChunkRequest, opts ...grpc.CallOption) (*Chunk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chunk)
	err := c.cc.Invoke(ctx, TranscriptService_GetTranscriptChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) ListChunkContributions(ctx context.Context, in *ListChunkContributionsRequest, opts ...grpc.CallOption) (*ChunkContributionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkContributionList)
	err := c.cc.Invoke(ctx, TranscriptService_ListChunkContributions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) CreateChunkContribution(ctx context.Context, in *CreateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, TranscriptService_CreateChunkContribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) GetChunkContribution(ctx context.Context, in *GetChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, TranscriptService_GetChunkContribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) UpdateChunkContribution(ctx context.Context, in *UpdateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, TranscriptService_UpdateChunkContribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) DeleteChunkContribution(ctx context.Context, in *DeleteChunkContributionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TranscriptService_DeleteChunkContribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) RequestChunkContributionState(ctx context.Context, in *RequestChunkContributionStateRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, TranscriptService_RequestChunkContributionState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) ListTranscriptChanges(ctx context.Context, in *ListTranscriptChangesRequest, opts ...grpc.CallOption) (*TranscriptChangeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptChangeList)
	err := c.cc.Invoke(ctx, TranscriptService_ListTranscriptChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) GetTranscriptChange(ctx context.Context, in *GetTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptChange)
	err := c.cc.Invoke(ctx, TranscriptService_GetTranscriptChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) GetTranscriptChangeDiff(ctx context.Context, in *GetTranscriptChangeDiffRequest, opts ...grpc.CallOption) (*TranscriptChangeDiff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptChangeDiff)
	err := c.cc.Invoke(ctx, TranscriptService_GetTranscriptChangeDiff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) CreateTranscriptChange(ctx context.Context, in *CreateTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptChange)
	err := c.cc.Invoke(ctx, TranscriptService_CreateTranscriptChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) UpdateTranscriptChange(ctx context.Context, in *UpdateTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptChange)
	err := c.cc.Invoke(ctx, TranscriptService_UpdateTranscriptChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) DeleteTranscriptChange(ctx context.Context, in *DeleteTranscriptChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TranscriptService_DeleteTranscriptChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) RequestTranscriptChangeState(ctx context.Context, in *RequestTranscriptChangeStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TranscriptService_RequestTranscriptChangeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) SetTranscriptRatingScore(ctx context.Context, in *SetTranscriptRatingScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TranscriptService_SetTranscriptRatingScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) BulkSetTranscriptRatingScore(ctx context.Context, in *BulkSetTranscriptRatingScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TranscriptService_BulkSetTranscriptRatingScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) BulkSetTranscriptTags(ctx context.Context, in *BulkSetTranscriptTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TranscriptService_BulkSetTranscriptTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscriptServiceServer is the server API for TranscriptService service.
// All implementations should embed UnimplementedTranscriptServiceServer
// for forward compatibility.
type TranscriptServiceServer interface {
	GetTranscript(context.Context, *GetTranscriptRequest) (*Transcript, error)
	GetTranscriptDialog(context.Context, *GetTranscriptDialogRequest) (*TranscriptDialog, error)
	ListTranscripts(context.Context, *ListTranscriptsRequest) (*TranscriptList, error)
	ListChunkedTranscripts(context.Context, *emptypb.Empty) (*ChunkedTranscriptList, error)
	GetChunkedTranscriptChunkStats(context.Context, *emptypb.Empty) (*ChunkStats, error)
	ListTranscriptChunks(context.Context, *ListTranscriptChunksRequest) (*TranscriptChunkList, error)
	GetTranscriptChunk(context.Context, *GetTranscriptChunkRequest) (*Chunk, error)
	ListChunkContributions(context.Context, *ListChunkContributionsRequest) (*ChunkContributionList, error)
	CreateChunkContribution(context.Context, *CreateChunkContributionRequest) (*ChunkContribution, error)
	GetChunkContribution(context.Context, *GetChunkContributionRequest) (*ChunkContribution, error)
	UpdateChunkContribution(context.Context, *UpdateChunkContributionRequest) (*ChunkContribution, error)
	DeleteChunkContribution(context.Context, *DeleteChunkContributionRequest) (*emptypb.Empty, error)
	RequestChunkContributionState(context.Context, *RequestChunkContributionStateRequest) (*ChunkContribution, error)
	ListTranscriptChanges(context.Context, *ListTranscriptChangesRequest) (*TranscriptChangeList, error)
	GetTranscriptChange(context.Context, *GetTranscriptChangeRequest) (*TranscriptChange, error)
	GetTranscriptChangeDiff(context.Context, *GetTranscriptChangeDiffRequest) (*TranscriptChangeDiff, error)
	CreateTranscriptChange(context.Context, *CreateTranscriptChangeRequest) (*TranscriptChange, error)
	UpdateTranscriptChange(context.Context, *UpdateTranscriptChangeRequest) (*TranscriptChange, error)
	DeleteTranscriptChange(context.Context, *DeleteTranscriptChangeRequest) (*emptypb.Empty, error)
	RequestTranscriptChangeState(context.Context, *RequestTranscriptChangeStateRequest) (*emptypb.Empty, error)
	SetTranscriptRatingScore(context.Context, *SetTranscriptRatingScoreRequest) (*emptypb.Empty, error)
	BulkSetTranscriptRatingScore(context.Context, *BulkSetTranscriptRatingScoreRequest) (*emptypb.Empty, error)
	BulkSetTranscriptTags(context.Context, *BulkSetTranscriptTagsRequest) (*emptypb.Empty, error)
}

// UnimplementedTranscriptServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTranscriptServiceServer struct{}

func (UnimplementedTranscriptServiceServer) GetTranscript(context.Context, *GetTranscriptRequest) (*Transcript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscript not implemented")
}
func (UnimplementedTranscriptServiceServer) GetTranscriptDialog(context.Context, *GetTranscriptDialogRequest) (*TranscriptDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptDialog not implemented")
}
func (UnimplementedTranscriptServiceServer) ListTranscripts(context.Context, *ListTranscriptsRequest) (*TranscriptList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranscripts not implemented")
}
func (UnimplementedTranscriptServiceServer) ListChunkedTranscripts(context.Context, *emptypb.Empty) (*ChunkedTranscriptList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChunkedTranscripts not implemented")
}
func (UnimplementedTranscriptServiceServer) GetChunkedTranscriptChunkStats(context.Context, *emptypb.Empty) (*ChunkStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkedTranscriptChunkStats not implemented")
}
func (UnimplementedTranscriptServiceServer) ListTranscriptChunks(context.Context, *ListTranscriptChunksRequest) (*TranscriptChunkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranscriptChunks not implemented")
}
func (UnimplementedTranscriptServiceServer) GetTranscriptChunk(context.Context, *GetTranscriptChunkRequest) (*Chunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptChunk not implemented")
}
func (UnimplementedTranscriptServiceServer) ListChunkContributions(context.Context, *ListChunkContributionsRequest) (*ChunkContributionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChunkContributions not implemented")
}
func (UnimplementedTranscriptServiceServer) CreateChunkContribution(context.Context, *CreateChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChunkContribution not implemented")
}
func (UnimplementedTranscriptServiceServer) GetChunkContribution(context.Context, *GetChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkContribution not implemented")
}
func (UnimplementedTranscriptServiceServer) UpdateChunkContribution(context.Context, *UpdateChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChunkContribution not implemented")
}
func (UnimplementedTranscriptServiceServer) DeleteChunkContribution(context.Context, *DeleteChunkContributionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunkContribution not implemented")
}
func (UnimplementedTranscriptServiceServer) RequestChunkContributionState(context.Context, *RequestChunkContributionStateRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChunkContributionState not implemented")
}
func (UnimplementedTranscriptServiceServer) ListTranscriptChanges(context.Context, *ListTranscriptChangesRequest) (*TranscriptChangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranscriptChanges not implemented")
}
func (UnimplementedTranscriptServiceServer) GetTranscriptChange(context.Context, *GetTranscriptChangeRequest) (*TranscriptChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptChange not implemented")
}
func (UnimplementedTranscriptServiceServer) GetTranscriptChangeDiff(context.Context, *GetTranscriptChangeDiffRequest) (*TranscriptChangeDiff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptChangeDiff not implemented")
}
func (UnimplementedTranscriptServiceServer) CreateTranscriptChange(context.Context, *CreateTranscriptChangeRequest) (*TranscriptChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTranscriptChange not implemented")
}
func (UnimplementedTranscriptServiceServer) UpdateTranscriptChange(context.Context, *UpdateTranscriptChangeRequest) (*TranscriptChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTranscriptChange not implemented")
}
func (UnimplementedTranscriptServiceServer) DeleteTranscriptChange(context.Context, *DeleteTranscriptChangeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTranscriptChange not implemented")
}
func (UnimplementedTranscriptServiceServer) RequestTranscriptChangeState(context.Context, *RequestTranscriptChangeStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTranscriptChangeState not implemented")
}
func (UnimplementedTranscriptServiceServer) SetTranscriptRatingScore(context.Context, *SetTranscriptRatingScoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTranscriptRatingScore not implemented")
}
func (UnimplementedTranscriptServiceServer) BulkSetTranscriptRatingScore(context.Context, *BulkSetTranscriptRatingScoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkSetTranscriptRatingScore not implemented")
}
func (UnimplementedTranscriptServiceServer) BulkSetTranscriptTags(context.Context, *BulkSetTranscriptTagsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkSetTranscriptTags not implemented")
}
func (UnimplementedTranscriptServiceServer) testEmbeddedByValue() {}

// UnsafeTranscriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscriptServiceServer will
// result in compilation errors.
type UnsafeTranscriptServiceServer interface {
	mustEmbedUnimplementedTranscriptServiceServer()
}

func RegisterTranscriptServiceServer(s grpc.ServiceRegistrar, srv TranscriptServiceServer) {
	// If the following call pancis, it indicates UnimplementedTranscriptServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TranscriptService_ServiceDesc, srv)
}

func _TranscriptService_GetTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).GetTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_GetTranscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).GetTranscript(ctx, req.(*GetTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_GetTranscriptDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).GetTranscriptDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_GetTranscriptDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).GetTranscriptDialog(ctx, req.(*GetTranscriptDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_ListTranscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).ListTranscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_ListTranscripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).ListTranscripts(ctx, req.(*ListTranscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_ListChunkedTranscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).ListChunkedTranscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_ListChunkedTranscripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).ListChunkedTranscripts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_GetChunkedTranscriptChunkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).GetChunkedTranscriptChunkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_GetChunkedTranscriptChunkStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).GetChunkedTranscriptChunkStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_ListTranscriptChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranscriptChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).ListTranscriptChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_ListTranscriptChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).ListTranscriptChunks(ctx, req.(*ListTranscriptChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_GetTranscriptChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).GetTranscriptChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_GetTranscriptChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).GetTranscriptChunk(ctx, req.(*GetTranscriptChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_ListChunkContributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChunkContributionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).ListChunkContributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_ListChunkContributions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).ListChunkContributions(ctx, req.(*ListChunkContributionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_CreateChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).CreateChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_CreateChunkContribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).CreateChunkContribution(ctx, req.(*CreateChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_GetChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).GetChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_GetChunkContribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).GetChunkContribution(ctx, req.(*GetChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_UpdateChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).UpdateChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_UpdateChunkContribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).UpdateChunkContribution(ctx, req.(*UpdateChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_DeleteChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).DeleteChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_DeleteChunkContribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).DeleteChunkContribution(ctx, req.(*DeleteChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_RequestChunkContributionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChunkContributionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).RequestChunkContributionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_RequestChunkContributionState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).RequestChunkContributionState(ctx, req.(*RequestChunkContributionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_ListTranscriptChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranscriptChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).ListTranscriptChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_ListTranscriptChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).ListTranscriptChanges(ctx, req.(*ListTranscriptChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_GetTranscriptChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).GetTranscriptChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_GetTranscriptChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).GetTranscriptChange(ctx, req.(*GetTranscriptChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_GetTranscriptChangeDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptChangeDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).GetTranscriptChangeDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_GetTranscriptChangeDiff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).GetTranscriptChangeDiff(ctx, req.(*GetTranscriptChangeDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_CreateTranscriptChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTranscriptChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).CreateTranscriptChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_CreateTranscriptChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).CreateTranscriptChange(ctx, req.(*CreateTranscriptChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_UpdateTranscriptChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTranscriptChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).UpdateTranscriptChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_UpdateTranscriptChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).UpdateTranscriptChange(ctx, req.(*UpdateTranscriptChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_DeleteTranscriptChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTranscriptChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).DeleteTranscriptChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_DeleteTranscriptChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).DeleteTranscriptChange(ctx, req.(*DeleteTranscriptChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_RequestTranscriptChangeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTranscriptChangeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).RequestTranscriptChangeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_RequestTranscriptChangeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).RequestTranscriptChangeState(ctx, req.(*RequestTranscriptChangeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_SetTranscriptRatingScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTranscriptRatingScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).SetTranscriptRatingScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_SetTranscriptRatingScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).SetTranscriptRatingScore(ctx, req.(*SetTranscriptRatingScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_BulkSetTranscriptRatingScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkSetTranscriptRatingScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).BulkSetTranscriptRatingScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_BulkSetTranscriptRatingScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).BulkSetTranscriptRatingScore(ctx, req.(*BulkSetTranscriptRatingScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_BulkSetTranscriptTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkSetTranscriptTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).BulkSetTranscriptTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_BulkSetTranscriptTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).BulkSetTranscriptTags(ctx, req.(*BulkSetTranscriptTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranscriptService_ServiceDesc is the grpc.ServiceDesc for TranscriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranscriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rsk.TranscriptService",
	HandlerType: (*TranscriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTranscript",
			Handler:    _TranscriptService_GetTranscript_Handler,
		},
		{
			MethodName: "GetTranscriptDialog",
			Handler:    _TranscriptService_GetTranscriptDialog_Handler,
		},
		{
			MethodName: "ListTranscripts",
			Handler:    _TranscriptService_ListTranscripts_Handler,
		},
		{
			MethodName: "ListChunkedTranscripts",
			Handler:    _TranscriptService_ListChunkedTranscripts_Handler,
		},
		{
			MethodName: "GetChunkedTranscriptChunkStats",
			Handler:    _TranscriptService_GetChunkedTranscriptChunkStats_Handler,
		},
		{
			MethodName: "ListTranscriptChunks",
			Handler:    _TranscriptService_ListTranscriptChunks_Handler,
		},
		{
			MethodName: "GetTranscriptChunk",
			Handler:    _TranscriptService_GetTranscriptChunk_Handler,
		},
		{
			MethodName: "ListChunkContributions",
			Handler:    _TranscriptService_ListChunkContributions_Handler,
		},
		{
			MethodName: "CreateChunkContribution",
			Handler:    _TranscriptService_CreateChunkContribution_Handler,
		},
		{
			MethodName: "GetChunkContribution",
			Handler:    _TranscriptService_GetChunkContribution_Handler,
		},
		{
			MethodName: "UpdateChunkContribution",
			Handler:    _TranscriptService_UpdateChunkContribution_Handler,
		},
		{
			MethodName: "DeleteChunkContribution",
			Handler:    _TranscriptService_DeleteChunkContribution_Handler,
		},
		{
			MethodName: "RequestChunkContributionState",
			Handler:    _TranscriptService_RequestChunkContributionState_Handler,
		},
		{
			MethodName: "ListTranscriptChanges",
			Handler:    _TranscriptService_ListTranscriptChanges_Handler,
		},
		{
			MethodName: "GetTranscriptChange",
			Handler:    _TranscriptService_GetTranscriptChange_Handler,
		},
		{
			MethodName: "GetTranscriptChangeDiff",
			Handler:    _TranscriptService_GetTranscriptChangeDiff_Handler,
		},
		{
			MethodName: "CreateTranscriptChange",
			Handler:    _TranscriptService_CreateTranscriptChange_Handler,
		},
		{
			MethodName: "UpdateTranscriptChange",
			Handler:    _TranscriptService_UpdateTranscriptChange_Handler,
		},
		{
			MethodName: "DeleteTranscriptChange",
			Handler:    _TranscriptService_DeleteTranscriptChange_Handler,
		},
		{
			MethodName: "RequestTranscriptChangeState",
			Handler:    _TranscriptService_RequestTranscriptChangeState_Handler,
		},
		{
			MethodName: "SetTranscriptRatingScore",
			Handler:    _TranscriptService_SetTranscriptRatingScore_Handler,
		},
		{
			MethodName: "BulkSetTranscriptRatingScore",
			Handler:    _TranscriptService_BulkSetTranscriptRatingScore_Handler,
		},
		{
			MethodName: "BulkSetTranscriptTags",
			Handler:    _TranscriptService_BulkSetTranscriptTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transcript.proto",
}
