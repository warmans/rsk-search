// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: transcript.proto

package api

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContributionState int32

const (
	ContributionState_STATE_UNDEFINED        ContributionState = 0
	ContributionState_STATE_REQUEST_APPROVAL ContributionState = 1
	ContributionState_STATE_PENDING          ContributionState = 2
	ContributionState_STATE_APPROVED         ContributionState = 3
	ContributionState_STATE_REJECTED         ContributionState = 4
)

// Enum value maps for ContributionState.
var (
	ContributionState_name = map[int32]string{
		0: "STATE_UNDEFINED",
		1: "STATE_REQUEST_APPROVAL",
		2: "STATE_PENDING",
		3: "STATE_APPROVED",
		4: "STATE_REJECTED",
	}
	ContributionState_value = map[string]int32{
		"STATE_UNDEFINED":        0,
		"STATE_REQUEST_APPROVAL": 1,
		"STATE_PENDING":          2,
		"STATE_APPROVED":         3,
		"STATE_REJECTED":         4,
	}
)

func (x ContributionState) Enum() *ContributionState {
	p := new(ContributionState)
	*p = x
	return p
}

func (x ContributionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributionState) Descriptor() protoreflect.EnumDescriptor {
	return file_transcript_proto_enumTypes[0].Descriptor()
}

func (ContributionState) Type() protoreflect.EnumType {
	return &file_transcript_proto_enumTypes[0]
}

func (x ContributionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributionState.Descriptor instead.
func (ContributionState) EnumDescriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{0}
}

type AudioQuality int32

const (
	AudioQuality_AUDIO_QUALITY_UNKNOWN AudioQuality = 0
	AudioQuality_POOR                  AudioQuality = 1
	AudioQuality_AVERAGE               AudioQuality = 2
	AudioQuality_GOOD                  AudioQuality = 3
)

// Enum value maps for AudioQuality.
var (
	AudioQuality_name = map[int32]string{
		0: "AUDIO_QUALITY_UNKNOWN",
		1: "POOR",
		2: "AVERAGE",
		3: "GOOD",
	}
	AudioQuality_value = map[string]int32{
		"AUDIO_QUALITY_UNKNOWN": 0,
		"POOR":                  1,
		"AVERAGE":               2,
		"GOOD":                  3,
	}
)

func (x AudioQuality) Enum() *AudioQuality {
	p := new(AudioQuality)
	*p = x
	return p
}

func (x AudioQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_transcript_proto_enumTypes[1].Descriptor()
}

func (AudioQuality) Type() protoreflect.EnumType {
	return &file_transcript_proto_enumTypes[1]
}

func (x AudioQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioQuality.Descriptor instead.
func (AudioQuality) EnumDescriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{1}
}

type MediaType int32

const (
	MediaType_MEDIA_TYPE_UNKNOWN MediaType = 0
	MediaType_AUDIO              MediaType = 1
	MediaType_VIDEO              MediaType = 2
	MediaType_MULTI              MediaType = 3
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_UNKNOWN",
		1: "AUDIO",
		2: "VIDEO",
		3: "MULTI",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_UNKNOWN": 0,
		"AUDIO":              1,
		"VIDEO":              2,
		"MULTI":              3,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_transcript_proto_enumTypes[2].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_transcript_proto_enumTypes[2]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{2}
}

type PublicationType int32

const (
	PublicationType_PUBLICATION_TYPE_UNKNOWN PublicationType = 0
	PublicationType_PUBLICATION_TYPE_RADIO   PublicationType = 1
	PublicationType_PUBLICATION_TYPE_PODCAST PublicationType = 2
	PublicationType_PUBLICATION_TYPE_PROMO   PublicationType = 3
	PublicationType_PUBLICATION_TYPE_TV      PublicationType = 4
	PublicationType_PUBLICATION_TYPE_OTHER   PublicationType = 5
)

// Enum value maps for PublicationType.
var (
	PublicationType_name = map[int32]string{
		0: "PUBLICATION_TYPE_UNKNOWN",
		1: "PUBLICATION_TYPE_RADIO",
		2: "PUBLICATION_TYPE_PODCAST",
		3: "PUBLICATION_TYPE_PROMO",
		4: "PUBLICATION_TYPE_TV",
		5: "PUBLICATION_TYPE_OTHER",
	}
	PublicationType_value = map[string]int32{
		"PUBLICATION_TYPE_UNKNOWN": 0,
		"PUBLICATION_TYPE_RADIO":   1,
		"PUBLICATION_TYPE_PODCAST": 2,
		"PUBLICATION_TYPE_PROMO":   3,
		"PUBLICATION_TYPE_TV":      4,
		"PUBLICATION_TYPE_OTHER":   5,
	}
)

func (x PublicationType) Enum() *PublicationType {
	p := new(PublicationType)
	*p = x
	return p
}

func (x PublicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_transcript_proto_enumTypes[3].Descriptor()
}

func (PublicationType) Type() protoreflect.EnumType {
	return &file_transcript_proto_enumTypes[3]
}

func (x PublicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicationType.Descriptor instead.
func (PublicationType) EnumDescriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{3}
}

type Dialog_DialogType int32

const (
	Dialog_UNKNOWN Dialog_DialogType = 0
	Dialog_SONG    Dialog_DialogType = 1
	Dialog_CHAT    Dialog_DialogType = 2
	Dialog_NONE    Dialog_DialogType = 3
	Dialog_GAP     Dialog_DialogType = 4
)

// Enum value maps for Dialog_DialogType.
var (
	Dialog_DialogType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SONG",
		2: "CHAT",
		3: "NONE",
		4: "GAP",
	}
	Dialog_DialogType_value = map[string]int32{
		"UNKNOWN": 0,
		"SONG":    1,
		"CHAT":    2,
		"NONE":    3,
		"GAP":     4,
	}
)

func (x Dialog_DialogType) Enum() *Dialog_DialogType {
	p := new(Dialog_DialogType)
	*p = x
	return p
}

func (x Dialog_DialogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dialog_DialogType) Descriptor() protoreflect.EnumDescriptor {
	return file_transcript_proto_enumTypes[4].Descriptor()
}

func (Dialog_DialogType) Type() protoreflect.EnumType {
	return &file_transcript_proto_enumTypes[4]
}

func (x Dialog_DialogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dialog_DialogType.Descriptor instead.
func (Dialog_DialogType) EnumDescriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{3, 0}
}

type Transcript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Publication   string            `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
	Series        int32             `protobuf:"varint,3,opt,name=series,proto3" json:"series,omitempty"`
	Episode       int32             `protobuf:"varint,4,opt,name=episode,proto3" json:"episode,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Transcript    []*Dialog         `protobuf:"bytes,7,rep,name=transcript,proto3" json:"transcript,omitempty"`
	ReleaseDate   string            `protobuf:"bytes,8,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Synopses      []*Synopsis       `protobuf:"bytes,9,rep,name=synopses,proto3" json:"synopses,omitempty"`
	Contributors  []string          `protobuf:"bytes,10,rep,name=contributors,proto3" json:"contributors,omitempty"`
	Incomplete    bool              `protobuf:"varint,11,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
	RawTranscript string            `protobuf:"bytes,12,opt,name=raw_transcript,json=rawTranscript,proto3" json:"raw_transcript,omitempty"`
	// Deprecated: Marked as deprecated in transcript.proto.
	AudioUri           string       `protobuf:"bytes,13,opt,name=audio_uri,json=audioUri,proto3" json:"audio_uri,omitempty"`
	ShortId            string       `protobuf:"bytes,14,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
	Trivia             []*Trivia    `protobuf:"bytes,15,rep,name=trivia,proto3" json:"trivia,omitempty"`
	Actors             []string     `protobuf:"bytes,16,rep,name=actors,proto3" json:"actors,omitempty"`
	OffsetAccuracyPcnt int32        `protobuf:"varint,17,opt,name=offset_accuracy_pcnt,json=offsetAccuracyPcnt,proto3" json:"offset_accuracy_pcnt,omitempty"`
	Name               string       `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	Version            string       `protobuf:"bytes,19,opt,name=version,proto3" json:"version,omitempty"`
	Bestof             bool         `protobuf:"varint,20,opt,name=bestof,proto3" json:"bestof,omitempty"`
	Special            bool         `protobuf:"varint,21,opt,name=special,proto3" json:"special,omitempty"`
	Locked             bool         `protobuf:"varint,22,opt,name=locked,proto3" json:"locked,omitempty"`
	Summary            string       `protobuf:"bytes,23,opt,name=summary,proto3" json:"summary,omitempty"`
	AudioQuality       AudioQuality `protobuf:"varint,24,opt,name=audio_quality,json=audioQuality,proto3,enum=rsk.AudioQuality" json:"audio_quality,omitempty"`
	// Deprecated: Marked as deprecated in transcript.proto.
	MediaType       MediaType       `protobuf:"varint,25,opt,name=media_type,json=mediaType,proto3,enum=rsk.MediaType" json:"media_type,omitempty"`
	Media           *Media          `protobuf:"bytes,26,opt,name=media,proto3" json:"media,omitempty"`
	PublicationType PublicationType `protobuf:"varint,27,opt,name=publication_type,json=publicationType,proto3,enum=rsk.PublicationType" json:"publication_type,omitempty"`
	Ratings         *Ratings        `protobuf:"bytes,28,opt,name=ratings,proto3" json:"ratings,omitempty"`
	Tags            []*Tag          `protobuf:"bytes,29,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{0}
}

func (x *Transcript) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transcript) GetPublication() string {
	if x != nil {
		return x.Publication
	}
	return ""
}

func (x *Transcript) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *Transcript) GetEpisode() int32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *Transcript) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Transcript) GetTranscript() []*Dialog {
	if x != nil {
		return x.Transcript
	}
	return nil
}

func (x *Transcript) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Transcript) GetSynopses() []*Synopsis {
	if x != nil {
		return x.Synopses
	}
	return nil
}

func (x *Transcript) GetContributors() []string {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *Transcript) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

func (x *Transcript) GetRawTranscript() string {
	if x != nil {
		return x.RawTranscript
	}
	return ""
}

// Deprecated: Marked as deprecated in transcript.proto.
func (x *Transcript) GetAudioUri() string {
	if x != nil {
		return x.AudioUri
	}
	return ""
}

func (x *Transcript) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *Transcript) GetTrivia() []*Trivia {
	if x != nil {
		return x.Trivia
	}
	return nil
}

func (x *Transcript) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *Transcript) GetOffsetAccuracyPcnt() int32 {
	if x != nil {
		return x.OffsetAccuracyPcnt
	}
	return 0
}

func (x *Transcript) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transcript) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Transcript) GetBestof() bool {
	if x != nil {
		return x.Bestof
	}
	return false
}

func (x *Transcript) GetSpecial() bool {
	if x != nil {
		return x.Special
	}
	return false
}

func (x *Transcript) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Transcript) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Transcript) GetAudioQuality() AudioQuality {
	if x != nil {
		return x.AudioQuality
	}
	return AudioQuality_AUDIO_QUALITY_UNKNOWN
}

// Deprecated: Marked as deprecated in transcript.proto.
func (x *Transcript) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_UNKNOWN
}

func (x *Transcript) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Transcript) GetPublicationType() PublicationType {
	if x != nil {
		return x.PublicationType
	}
	return PublicationType_PUBLICATION_TYPE_UNKNOWN
}

func (x *Transcript) GetRatings() *Ratings {
	if x != nil {
		return x.Ratings
	}
	return nil
}

func (x *Transcript) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video           bool `protobuf:"varint,1,opt,name=video,proto3" json:"video,omitempty"`
	Audio           bool `protobuf:"varint,2,opt,name=audio,proto3" json:"audio,omitempty"`
	AudioRestricted bool `protobuf:"varint,3,opt,name=audio_restricted,json=audioRestricted,proto3" json:"audio_restricted,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{1}
}

func (x *Media) GetVideo() bool {
	if x != nil {
		return x.Video
	}
	return false
}

func (x *Media) GetAudio() bool {
	if x != nil {
		return x.Audio
	}
	return false
}

func (x *Media) GetAudioRestricted() bool {
	if x != nil {
		return x.AudioRestricted
	}
	return false
}

type ShortTranscript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Publication         string      `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
	Series              int32       `protobuf:"varint,3,opt,name=series,proto3" json:"series,omitempty"`
	Episode             int32       `protobuf:"varint,4,opt,name=episode,proto3" json:"episode,omitempty"`
	TranscriptAvailable bool        `protobuf:"varint,5,opt,name=transcript_available,json=transcriptAvailable,proto3" json:"transcript_available,omitempty"`
	Incomplete          bool        `protobuf:"varint,6,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
	ReleaseDate         string      `protobuf:"bytes,7,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Summary             string      `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`
	Synopsis            []*Synopsis `protobuf:"bytes,9,rep,name=synopsis,proto3" json:"synopsis,omitempty"`
	TriviaAvailable     bool        `protobuf:"varint,10,opt,name=trivia_available,json=triviaAvailable,proto3" json:"trivia_available,omitempty"`
	Actors              []string    `protobuf:"bytes,11,rep,name=actors,proto3" json:"actors,omitempty"`
	// Deprecated: Marked as deprecated in transcript.proto.
	AudioUri           string            `protobuf:"bytes,12,opt,name=audio_uri,json=audioUri,proto3" json:"audio_uri,omitempty"`
	ShortId            string            `protobuf:"bytes,13,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
	OffsetAccuracyPcnt int32             `protobuf:"varint,14,opt,name=offset_accuracy_pcnt,json=offsetAccuracyPcnt,proto3" json:"offset_accuracy_pcnt,omitempty"`
	Name               string            `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	Version            string            `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	Metadata           map[string]string `protobuf:"bytes,17,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bestof             bool              `protobuf:"varint,18,opt,name=bestof,proto3" json:"bestof,omitempty"`
	Special            bool              `protobuf:"varint,19,opt,name=special,proto3" json:"special,omitempty"`
	AudioQuality       AudioQuality      `protobuf:"varint,20,opt,name=audio_quality,json=audioQuality,proto3,enum=rsk.AudioQuality" json:"audio_quality,omitempty"`
	// Deprecated: Marked as deprecated in transcript.proto.
	MediaType       MediaType       `protobuf:"varint,21,opt,name=media_type,json=mediaType,proto3,enum=rsk.MediaType" json:"media_type,omitempty"`
	Media           *Media          `protobuf:"bytes,22,opt,name=media,proto3" json:"media,omitempty"`
	PublicationType PublicationType `protobuf:"varint,23,opt,name=publication_type,json=publicationType,proto3,enum=rsk.PublicationType" json:"publication_type,omitempty"`
	RatingScore     float32         `protobuf:"fixed32,24,opt,name=rating_score,json=ratingScore,proto3" json:"rating_score,omitempty"`
	NumRatingScores int32           `protobuf:"varint,25,opt,name=num_rating_scores,json=numRatingScores,proto3" json:"num_rating_scores,omitempty"`
}

func (x *ShortTranscript) Reset() {
	*x = ShortTranscript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortTranscript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortTranscript) ProtoMessage() {}

func (x *ShortTranscript) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortTranscript.ProtoReflect.Descriptor instead.
func (*ShortTranscript) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{2}
}

func (x *ShortTranscript) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortTranscript) GetPublication() string {
	if x != nil {
		return x.Publication
	}
	return ""
}

func (x *ShortTranscript) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *ShortTranscript) GetEpisode() int32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *ShortTranscript) GetTranscriptAvailable() bool {
	if x != nil {
		return x.TranscriptAvailable
	}
	return false
}

func (x *ShortTranscript) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

func (x *ShortTranscript) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *ShortTranscript) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ShortTranscript) GetSynopsis() []*Synopsis {
	if x != nil {
		return x.Synopsis
	}
	return nil
}

func (x *ShortTranscript) GetTriviaAvailable() bool {
	if x != nil {
		return x.TriviaAvailable
	}
	return false
}

func (x *ShortTranscript) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

// Deprecated: Marked as deprecated in transcript.proto.
func (x *ShortTranscript) GetAudioUri() string {
	if x != nil {
		return x.AudioUri
	}
	return ""
}

func (x *ShortTranscript) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *ShortTranscript) GetOffsetAccuracyPcnt() int32 {
	if x != nil {
		return x.OffsetAccuracyPcnt
	}
	return 0
}

func (x *ShortTranscript) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShortTranscript) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ShortTranscript) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ShortTranscript) GetBestof() bool {
	if x != nil {
		return x.Bestof
	}
	return false
}

func (x *ShortTranscript) GetSpecial() bool {
	if x != nil {
		return x.Special
	}
	return false
}

func (x *ShortTranscript) GetAudioQuality() AudioQuality {
	if x != nil {
		return x.AudioQuality
	}
	return AudioQuality_AUDIO_QUALITY_UNKNOWN
}

// Deprecated: Marked as deprecated in transcript.proto.
func (x *ShortTranscript) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_UNKNOWN
}

func (x *ShortTranscript) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ShortTranscript) GetPublicationType() PublicationType {
	if x != nil {
		return x.PublicationType
	}
	return PublicationType_PUBLICATION_TYPE_UNKNOWN
}

func (x *ShortTranscript) GetRatingScore() float32 {
	if x != nil {
		return x.RatingScore
	}
	return 0
}

func (x *ShortTranscript) GetNumRatingScores() int32 {
	if x != nil {
		return x.NumRatingScores
	}
	return 0
}

type Dialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos            int32             `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Type           Dialog_DialogType `protobuf:"varint,3,opt,name=type,proto3,enum=rsk.Dialog_DialogType" json:"type,omitempty"`
	Actor          string            `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`
	Content        string            `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Metadata       map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsMatchedRow   bool              `protobuf:"varint,8,opt,name=is_matched_row,json=isMatchedRow,proto3" json:"is_matched_row,omitempty"`
	Notable        bool              `protobuf:"varint,9,opt,name=notable,proto3" json:"notable,omitempty"`
	OffsetSec      int64             `protobuf:"varint,10,opt,name=offset_sec,json=offsetSec,proto3" json:"offset_sec,omitempty"` //deprecated
	OffsetInferred bool              `protobuf:"varint,11,opt,name=offset_inferred,json=offsetInferred,proto3" json:"offset_inferred,omitempty"`
	OffsetDistance int32             `protobuf:"varint,12,opt,name=offset_distance,json=offsetDistance,proto3" json:"offset_distance,omitempty"`
	OffsetMs       int32             `protobuf:"varint,13,opt,name=offset_ms,json=offsetMs,proto3" json:"offset_ms,omitempty"`
	DurationMs     int32             `protobuf:"varint,14,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	Placeholder    bool              `protobuf:"varint,15,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
}

func (x *Dialog) Reset() {
	*x = Dialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dialog) ProtoMessage() {}

func (x *Dialog) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dialog.ProtoReflect.Descriptor instead.
func (*Dialog) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{3}
}

func (x *Dialog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dialog) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Dialog) GetType() Dialog_DialogType {
	if x != nil {
		return x.Type
	}
	return Dialog_UNKNOWN
}

func (x *Dialog) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *Dialog) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Dialog) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Dialog) GetIsMatchedRow() bool {
	if x != nil {
		return x.IsMatchedRow
	}
	return false
}

func (x *Dialog) GetNotable() bool {
	if x != nil {
		return x.Notable
	}
	return false
}

func (x *Dialog) GetOffsetSec() int64 {
	if x != nil {
		return x.OffsetSec
	}
	return 0
}

func (x *Dialog) GetOffsetInferred() bool {
	if x != nil {
		return x.OffsetInferred
	}
	return false
}

func (x *Dialog) GetOffsetDistance() int32 {
	if x != nil {
		return x.OffsetDistance
	}
	return 0
}

func (x *Dialog) GetOffsetMs() int32 {
	if x != nil {
		return x.OffsetMs
	}
	return 0
}

func (x *Dialog) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Dialog) GetPlaceholder() bool {
	if x != nil {
		return x.Placeholder
	}
	return false
}

type Synopsis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	StartPos    int32  `protobuf:"varint,2,opt,name=start_pos,json=startPos,proto3" json:"start_pos,omitempty"`
	EndPos      int32  `protobuf:"varint,3,opt,name=end_pos,json=endPos,proto3" json:"end_pos,omitempty"`
}

func (x *Synopsis) Reset() {
	*x = Synopsis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Synopsis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Synopsis) ProtoMessage() {}

func (x *Synopsis) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Synopsis.ProtoReflect.Descriptor instead.
func (*Synopsis) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{4}
}

func (x *Synopsis) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Synopsis) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *Synopsis) GetEndPos() int32 {
	if x != nil {
		return x.EndPos
	}
	return 0
}

type Trivia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	StartPos    int32  `protobuf:"varint,2,opt,name=start_pos,json=startPos,proto3" json:"start_pos,omitempty"`
	EndPos      int32  `protobuf:"varint,3,opt,name=end_pos,json=endPos,proto3" json:"end_pos,omitempty"`
}

func (x *Trivia) Reset() {
	*x = Trivia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trivia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trivia) ProtoMessage() {}

func (x *Trivia) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trivia.ProtoReflect.Descriptor instead.
func (*Trivia) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{5}
}

func (x *Trivia) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Trivia) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *Trivia) GetEndPos() int32 {
	if x != nil {
		return x.EndPos
	}
	return 0
}

type GetTranscriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epid    string `protobuf:"bytes,1,opt,name=epid,proto3" json:"epid,omitempty"`
	WithRaw bool   `protobuf:"varint,2,opt,name=with_raw,json=withRaw,proto3" json:"with_raw,omitempty"`
}

func (x *GetTranscriptRequest) Reset() {
	*x = GetTranscriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTranscriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTranscriptRequest) ProtoMessage() {}

func (x *GetTranscriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTranscriptRequest.ProtoReflect.Descriptor instead.
func (*GetTranscriptRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{6}
}

func (x *GetTranscriptRequest) GetEpid() string {
	if x != nil {
		return x.Epid
	}
	return ""
}

func (x *GetTranscriptRequest) GetWithRaw() bool {
	if x != nil {
		return x.WithRaw
	}
	return false
}

type DialogRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *DialogRange) Reset() {
	*x = DialogRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogRange) ProtoMessage() {}

func (x *DialogRange) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogRange.ProtoReflect.Descriptor instead.
func (*DialogRange) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{7}
}

func (x *DialogRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DialogRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type GetTranscriptDialogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epid string `protobuf:"bytes,1,opt,name=epid,proto3" json:"epid,omitempty"`
	// Deprecated: Marked as deprecated in transcript.proto.
	Pos int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	// Deprecated: Marked as deprecated in transcript.proto.
	NumContextLines int32        `protobuf:"varint,3,opt,name=num_context_lines,json=numContextLines,proto3" json:"num_context_lines,omitempty"`
	Range           *DialogRange `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *GetTranscriptDialogRequest) Reset() {
	*x = GetTranscriptDialogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTranscriptDialogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTranscriptDialogRequest) ProtoMessage() {}

func (x *GetTranscriptDialogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTranscriptDialogRequest.ProtoReflect.Descriptor instead.
func (*GetTranscriptDialogRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{8}
}

func (x *GetTranscriptDialogRequest) GetEpid() string {
	if x != nil {
		return x.Epid
	}
	return ""
}

// Deprecated: Marked as deprecated in transcript.proto.
func (x *GetTranscriptDialogRequest) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

// Deprecated: Marked as deprecated in transcript.proto.
func (x *GetTranscriptDialogRequest) GetNumContextLines() int32 {
	if x != nil {
		return x.NumContextLines
	}
	return 0
}

func (x *GetTranscriptDialogRequest) GetRange() *DialogRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type ListTranscriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTranscriptsRequest) Reset() {
	*x = ListTranscriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTranscriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTranscriptsRequest) ProtoMessage() {}

func (x *ListTranscriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTranscriptsRequest.ProtoReflect.Descriptor instead.
func (*ListTranscriptsRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{9}
}

type TranscriptList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Episodes []*ShortTranscript `protobuf:"bytes,1,rep,name=episodes,proto3" json:"episodes,omitempty"`
}

func (x *TranscriptList) Reset() {
	*x = TranscriptList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptList) ProtoMessage() {}

func (x *TranscriptList) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptList.ProtoReflect.Descriptor instead.
func (*TranscriptList) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{10}
}

func (x *TranscriptList) GetEpisodes() []*ShortTranscript {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type Ratings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scores    map[string]float32 `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	ScoreAvg  float32            `protobuf:"fixed32,2,opt,name=score_avg,json=scoreAvg,proto3" json:"score_avg,omitempty"`
	NumScores int32              `protobuf:"varint,3,opt,name=num_scores,json=numScores,proto3" json:"num_scores,omitempty"`
}

func (x *Ratings) Reset() {
	*x = Ratings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratings) ProtoMessage() {}

func (x *Ratings) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratings.ProtoReflect.Descriptor instead.
func (*Ratings) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{11}
}

func (x *Ratings) GetScores() map[string]float32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *Ratings) GetScoreAvg() float32 {
	if x != nil {
		return x.ScoreAvg
	}
	return 0
}

func (x *Ratings) GetNumScores() int32 {
	if x != nil {
		return x.NumScores
	}
	return 0
}

type ChunkStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []ContributionState `protobuf:"varint,1,rep,packed,name=states,proto3,enum=rsk.ContributionState" json:"states,omitempty"`
}

func (x *ChunkStates) Reset() {
	*x = ChunkStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkStates) ProtoMessage() {}

func (x *ChunkStates) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkStates.ProtoReflect.Descriptor instead.
func (*ChunkStates) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{12}
}

func (x *ChunkStates) GetStates() []ContributionState {
	if x != nil {
		return x.States
	}
	return nil
}

type ChunkedTranscriptStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Publication                     string                  `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
	Series                          int32                   `protobuf:"varint,3,opt,name=series,proto3" json:"series,omitempty"`
	Episode                         int32                   `protobuf:"varint,4,opt,name=episode,proto3" json:"episode,omitempty"`
	ChunkContributions              map[string]*ChunkStates `protobuf:"bytes,5,rep,name=chunk_contributions,json=chunkContributions,proto3" json:"chunk_contributions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumChunks                       int32                   `protobuf:"varint,6,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
	NumContributions                int32                   `protobuf:"varint,7,opt,name=num_contributions,json=numContributions,proto3" json:"num_contributions,omitempty"`
	NumPendingContributions         int32                   `protobuf:"varint,8,opt,name=num_pending_contributions,json=numPendingContributions,proto3" json:"num_pending_contributions,omitempty"`
	NumRequestApprovalContributions int32                   `protobuf:"varint,9,opt,name=num_request_approval_contributions,json=numRequestApprovalContributions,proto3" json:"num_request_approval_contributions,omitempty"`
	NumApprovedContributions        int32                   `protobuf:"varint,10,opt,name=num_approved_contributions,json=numApprovedContributions,proto3" json:"num_approved_contributions,omitempty"`
	NumRejectedContributions        int32                   `protobuf:"varint,11,opt,name=num_rejected_contributions,json=numRejectedContributions,proto3" json:"num_rejected_contributions,omitempty"`
	Name                            string                  `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ChunkedTranscriptStats) Reset() {
	*x = ChunkedTranscriptStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedTranscriptStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedTranscriptStats) ProtoMessage() {}

func (x *ChunkedTranscriptStats) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedTranscriptStats.ProtoReflect.Descriptor instead.
func (*ChunkedTranscriptStats) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{13}
}

func (x *ChunkedTranscriptStats) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChunkedTranscriptStats) GetPublication() string {
	if x != nil {
		return x.Publication
	}
	return ""
}

func (x *ChunkedTranscriptStats) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *ChunkedTranscriptStats) GetEpisode() int32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *ChunkedTranscriptStats) GetChunkContributions() map[string]*ChunkStates {
	if x != nil {
		return x.ChunkContributions
	}
	return nil
}

func (x *ChunkedTranscriptStats) GetNumChunks() int32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

func (x *ChunkedTranscriptStats) GetNumContributions() int32 {
	if x != nil {
		return x.NumContributions
	}
	return 0
}

func (x *ChunkedTranscriptStats) GetNumPendingContributions() int32 {
	if x != nil {
		return x.NumPendingContributions
	}
	return 0
}

func (x *ChunkedTranscriptStats) GetNumRequestApprovalContributions() int32 {
	if x != nil {
		return x.NumRequestApprovalContributions
	}
	return 0
}

func (x *ChunkedTranscriptStats) GetNumApprovedContributions() int32 {
	if x != nil {
		return x.NumApprovedContributions
	}
	return 0
}

func (x *ChunkedTranscriptStats) GetNumRejectedContributions() int32 {
	if x != nil {
		return x.NumRejectedContributions
	}
	return 0
}

func (x *ChunkedTranscriptStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ChunkedTranscriptList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunked []*ChunkedTranscriptStats `protobuf:"bytes,1,rep,name=chunked,proto3" json:"chunked,omitempty"`
}

func (x *ChunkedTranscriptList) Reset() {
	*x = ChunkedTranscriptList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedTranscriptList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedTranscriptList) ProtoMessage() {}

func (x *ChunkedTranscriptList) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedTranscriptList.ProtoReflect.Descriptor instead.
func (*ChunkedTranscriptList) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{14}
}

func (x *ChunkedTranscriptList) GetChunked() []*ChunkedTranscriptStats {
	if x != nil {
		return x.Chunked
	}
	return nil
}

type ChunkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumPending           int32  `protobuf:"varint,1,opt,name=num_pending,json=numPending,proto3" json:"num_pending,omitempty"`
	NumSubmitted         int32  `protobuf:"varint,2,opt,name=num_submitted,json=numSubmitted,proto3" json:"num_submitted,omitempty"`
	SuggestedNextChunkId string `protobuf:"bytes,3,opt,name=suggested_next_chunk_id,json=suggestedNextChunkId,proto3" json:"suggested_next_chunk_id,omitempty"`
}

func (x *ChunkStats) Reset() {
	*x = ChunkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkStats) ProtoMessage() {}

func (x *ChunkStats) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkStats.ProtoReflect.Descriptor instead.
func (*ChunkStats) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{15}
}

func (x *ChunkStats) GetNumPending() int32 {
	if x != nil {
		return x.NumPending
	}
	return 0
}

func (x *ChunkStats) GetNumSubmitted() int32 {
	if x != nil {
		return x.NumSubmitted
	}
	return 0
}

func (x *ChunkStats) GetSuggestedNextChunkId() string {
	if x != nil {
		return x.SuggestedNextChunkId
	}
	return ""
}

type GetTranscriptChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTranscriptChunkRequest) Reset() {
	*x = GetTranscriptChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTranscriptChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTranscriptChunkRequest) ProtoMessage() {}

func (x *GetTranscriptChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTranscriptChunkRequest.ProtoReflect.Descriptor instead.
func (*GetTranscriptChunkRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{16}
}

func (x *GetTranscriptChunkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChunkedTranscriptId string `protobuf:"bytes,2,opt,name=chunked_transcript_id,json=chunkedTranscriptId,proto3" json:"chunked_transcript_id,omitempty"`
	Raw                 string `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
	// Deprecated: Marked as deprecated in transcript.proto.
	AudioClipUri     string `protobuf:"bytes,4,opt,name=audio_clip_uri,json=audioClipUri,proto3" json:"audio_clip_uri,omitempty"`
	NumContributions int32  `protobuf:"varint,5,opt,name=num_contributions,json=numContributions,proto3" json:"num_contributions,omitempty"`
	EpisodeId        string `protobuf:"bytes,6,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	StartTimeMs      int32  `protobuf:"varint,7,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"`
	EndTimeMs        int32  `protobuf:"varint,8,opt,name=end_time_ms,json=endTimeMs,proto3" json:"end_time_ms,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{17}
}

func (x *Chunk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chunk) GetChunkedTranscriptId() string {
	if x != nil {
		return x.ChunkedTranscriptId
	}
	return ""
}

func (x *Chunk) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

// Deprecated: Marked as deprecated in transcript.proto.
func (x *Chunk) GetAudioClipUri() string {
	if x != nil {
		return x.AudioClipUri
	}
	return ""
}

func (x *Chunk) GetNumContributions() int32 {
	if x != nil {
		return x.NumContributions
	}
	return 0
}

func (x *Chunk) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *Chunk) GetStartTimeMs() int32 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *Chunk) GetEndTimeMs() int32 {
	if x != nil {
		return x.EndTimeMs
	}
	return 0
}

type ListTranscriptChunksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkedTranscriptId string `protobuf:"bytes,1,opt,name=chunked_transcript_id,json=chunkedTranscriptId,proto3" json:"chunked_transcript_id,omitempty"`
	Filter              string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	SortField           string `protobuf:"bytes,3,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`
	SortDirection       string `protobuf:"bytes,4,opt,name=sort_direction,json=sortDirection,proto3" json:"sort_direction,omitempty"`
	Page                int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize            int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListTranscriptChunksRequest) Reset() {
	*x = ListTranscriptChunksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTranscriptChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTranscriptChunksRequest) ProtoMessage() {}

func (x *ListTranscriptChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTranscriptChunksRequest.ProtoReflect.Descriptor instead.
func (*ListTranscriptChunksRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{18}
}

func (x *ListTranscriptChunksRequest) GetChunkedTranscriptId() string {
	if x != nil {
		return x.ChunkedTranscriptId
	}
	return ""
}

func (x *ListTranscriptChunksRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTranscriptChunksRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListTranscriptChunksRequest) GetSortDirection() string {
	if x != nil {
		return x.SortDirection
	}
	return ""
}

func (x *ListTranscriptChunksRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTranscriptChunksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TranscriptChunkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks []*Chunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *TranscriptChunkList) Reset() {
	*x = TranscriptChunkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptChunkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptChunkList) ProtoMessage() {}

func (x *TranscriptChunkList) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptChunkList.ProtoReflect.Descriptor instead.
func (*TranscriptChunkList) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{19}
}

func (x *TranscriptChunkList) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type ListChunkContributionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter        string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	SortField     string `protobuf:"bytes,2,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`
	SortDirection string `protobuf:"bytes,3,opt,name=sort_direction,json=sortDirection,proto3" json:"sort_direction,omitempty"`
	Page          int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListChunkContributionsRequest) Reset() {
	*x = ListChunkContributionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChunkContributionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunkContributionsRequest) ProtoMessage() {}

func (x *ListChunkContributionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunkContributionsRequest.ProtoReflect.Descriptor instead.
func (*ListChunkContributionsRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{20}
}

func (x *ListChunkContributionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListChunkContributionsRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListChunkContributionsRequest) GetSortDirection() string {
	if x != nil {
		return x.SortDirection
	}
	return ""
}

func (x *ListChunkContributionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListChunkContributionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ChunkContributionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contributions []*ChunkContribution `protobuf:"bytes,1,rep,name=contributions,proto3" json:"contributions,omitempty"`
}

func (x *ChunkContributionList) Reset() {
	*x = ChunkContributionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkContributionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkContributionList) ProtoMessage() {}

func (x *ChunkContributionList) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkContributionList.ProtoReflect.Descriptor instead.
func (*ChunkContributionList) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{21}
}

func (x *ChunkContributionList) GetContributions() []*ChunkContribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

type ChunkContribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChunkId      string            `protobuf:"bytes,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Transcript   string            `protobuf:"bytes,3,opt,name=transcript,proto3" json:"transcript,omitempty"`
	State        ContributionState `protobuf:"varint,5,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	Author       *Author           `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	CreatedAt    string            `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StateComment string            `protobuf:"bytes,8,opt,name=state_comment,json=stateComment,proto3" json:"state_comment,omitempty"`
}

func (x *ChunkContribution) Reset() {
	*x = ChunkContribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkContribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkContribution) ProtoMessage() {}

func (x *ChunkContribution) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkContribution.ProtoReflect.Descriptor instead.
func (*ChunkContribution) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{22}
}

func (x *ChunkContribution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChunkContribution) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkContribution) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *ChunkContribution) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *ChunkContribution) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ChunkContribution) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ChunkContribution) GetStateComment() string {
	if x != nil {
		return x.StateComment
	}
	return ""
}

type ShortChunkContribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChunkId      string            `protobuf:"bytes,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	AuthorId     string            `protobuf:"bytes,4,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	State        ContributionState `protobuf:"varint,5,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	StateComment string            `protobuf:"bytes,6,opt,name=state_comment,json=stateComment,proto3" json:"state_comment,omitempty"`
}

func (x *ShortChunkContribution) Reset() {
	*x = ShortChunkContribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortChunkContribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortChunkContribution) ProtoMessage() {}

func (x *ShortChunkContribution) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortChunkContribution.ProtoReflect.Descriptor instead.
func (*ShortChunkContribution) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{23}
}

func (x *ShortChunkContribution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortChunkContribution) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ShortChunkContribution) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *ShortChunkContribution) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *ShortChunkContribution) GetStateComment() string {
	if x != nil {
		return x.StateComment
	}
	return ""
}

type ChunkChunkContributionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contributions []*ShortChunkContribution `protobuf:"bytes,1,rep,name=contributions,proto3" json:"contributions,omitempty"`
}

func (x *ChunkChunkContributionList) Reset() {
	*x = ChunkChunkContributionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkChunkContributionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkChunkContributionList) ProtoMessage() {}

func (x *ChunkChunkContributionList) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkChunkContributionList.ProtoReflect.Descriptor instead.
func (*ChunkChunkContributionList) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{24}
}

func (x *ChunkChunkContributionList) GetContributions() []*ShortChunkContribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

type GetChunkContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributionId string `protobuf:"bytes,1,opt,name=contribution_id,json=contributionId,proto3" json:"contribution_id,omitempty"`
}

func (x *GetChunkContributionRequest) Reset() {
	*x = GetChunkContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkContributionRequest) ProtoMessage() {}

func (x *GetChunkContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkContributionRequest.ProtoReflect.Descriptor instead.
func (*GetChunkContributionRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{25}
}

func (x *GetChunkContributionRequest) GetContributionId() string {
	if x != nil {
		return x.ContributionId
	}
	return ""
}

type CreateChunkContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId    string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *CreateChunkContributionRequest) Reset() {
	*x = CreateChunkContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChunkContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkContributionRequest) ProtoMessage() {}

func (x *CreateChunkContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkContributionRequest.ProtoReflect.Descriptor instead.
func (*CreateChunkContributionRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{26}
}

func (x *CreateChunkContributionRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *CreateChunkContributionRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

type UpdateChunkContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributionId string            `protobuf:"bytes,1,opt,name=contribution_id,json=contributionId,proto3" json:"contribution_id,omitempty"`
	Transcript     string            `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	State          ContributionState `protobuf:"varint,3,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
}

func (x *UpdateChunkContributionRequest) Reset() {
	*x = UpdateChunkContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChunkContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkContributionRequest) ProtoMessage() {}

func (x *UpdateChunkContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkContributionRequest.ProtoReflect.Descriptor instead.
func (*UpdateChunkContributionRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateChunkContributionRequest) GetContributionId() string {
	if x != nil {
		return x.ContributionId
	}
	return ""
}

func (x *UpdateChunkContributionRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *UpdateChunkContributionRequest) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

type DeleteChunkContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributionId string `protobuf:"bytes,1,opt,name=contribution_id,json=contributionId,proto3" json:"contribution_id,omitempty"`
}

func (x *DeleteChunkContributionRequest) Reset() {
	*x = DeleteChunkContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChunkContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkContributionRequest) ProtoMessage() {}

func (x *DeleteChunkContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkContributionRequest.ProtoReflect.Descriptor instead.
func (*DeleteChunkContributionRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteChunkContributionRequest) GetContributionId() string {
	if x != nil {
		return x.ContributionId
	}
	return ""
}

type RequestChunkContributionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributionId string            `protobuf:"bytes,1,opt,name=contribution_id,json=contributionId,proto3" json:"contribution_id,omitempty"`
	RequestState   ContributionState `protobuf:"varint,2,opt,name=request_state,json=requestState,proto3,enum=rsk.ContributionState" json:"request_state,omitempty"`
	Comment        string            `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RequestChunkContributionStateRequest) Reset() {
	*x = RequestChunkContributionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChunkContributionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChunkContributionStateRequest) ProtoMessage() {}

func (x *RequestChunkContributionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChunkContributionStateRequest.ProtoReflect.Descriptor instead.
func (*RequestChunkContributionStateRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{29}
}

func (x *RequestChunkContributionStateRequest) GetContributionId() string {
	if x != nil {
		return x.ContributionId
	}
	return ""
}

func (x *RequestChunkContributionStateRequest) GetRequestState() ContributionState {
	if x != nil {
		return x.RequestState
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *RequestChunkContributionStateRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type CreateTranscriptChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epid              string `protobuf:"bytes,1,opt,name=epid,proto3" json:"epid,omitempty"`
	Transcript        string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	TranscriptVersion string `protobuf:"bytes,3,opt,name=transcript_version,json=transcriptVersion,proto3" json:"transcript_version,omitempty"`
	Summary           string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *CreateTranscriptChangeRequest) Reset() {
	*x = CreateTranscriptChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTranscriptChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTranscriptChangeRequest) ProtoMessage() {}

func (x *CreateTranscriptChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTranscriptChangeRequest.ProtoReflect.Descriptor instead.
func (*CreateTranscriptChangeRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{30}
}

func (x *CreateTranscriptChangeRequest) GetEpid() string {
	if x != nil {
		return x.Epid
	}
	return ""
}

func (x *CreateTranscriptChangeRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *CreateTranscriptChangeRequest) GetTranscriptVersion() string {
	if x != nil {
		return x.TranscriptVersion
	}
	return ""
}

func (x *CreateTranscriptChangeRequest) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type ListTranscriptChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter        string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	SortField     string `protobuf:"bytes,2,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`
	SortDirection string `protobuf:"bytes,3,opt,name=sort_direction,json=sortDirection,proto3" json:"sort_direction,omitempty"`
	Page          int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListTranscriptChangesRequest) Reset() {
	*x = ListTranscriptChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTranscriptChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTranscriptChangesRequest) ProtoMessage() {}

func (x *ListTranscriptChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTranscriptChangesRequest.ProtoReflect.Descriptor instead.
func (*ListTranscriptChangesRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{31}
}

func (x *ListTranscriptChangesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTranscriptChangesRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListTranscriptChangesRequest) GetSortDirection() string {
	if x != nil {
		return x.SortDirection
	}
	return ""
}

func (x *ListTranscriptChangesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTranscriptChangesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type UpdateTranscriptChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Transcript      string            `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	State           ContributionState `protobuf:"varint,3,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	PointsOnApprove float32           `protobuf:"fixed32,4,opt,name=points_on_approve,json=pointsOnApprove,proto3" json:"points_on_approve,omitempty"`
	Summary         string            `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *UpdateTranscriptChangeRequest) Reset() {
	*x = UpdateTranscriptChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTranscriptChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTranscriptChangeRequest) ProtoMessage() {}

func (x *UpdateTranscriptChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTranscriptChangeRequest.ProtoReflect.Descriptor instead.
func (*UpdateTranscriptChangeRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateTranscriptChangeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTranscriptChangeRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *UpdateTranscriptChangeRequest) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *UpdateTranscriptChangeRequest) GetPointsOnApprove() float32 {
	if x != nil {
		return x.PointsOnApprove
	}
	return 0
}

func (x *UpdateTranscriptChangeRequest) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type DeleteTranscriptChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTranscriptChangeRequest) Reset() {
	*x = DeleteTranscriptChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTranscriptChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTranscriptChangeRequest) ProtoMessage() {}

func (x *DeleteTranscriptChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTranscriptChangeRequest.ProtoReflect.Descriptor instead.
func (*DeleteTranscriptChangeRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteTranscriptChangeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TranscriptChangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*ShortTranscriptChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *TranscriptChangeList) Reset() {
	*x = TranscriptChangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptChangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptChangeList) ProtoMessage() {}

func (x *TranscriptChangeList) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptChangeList.ProtoReflect.Descriptor instead.
func (*TranscriptChangeList) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{34}
}

func (x *TranscriptChangeList) GetChanges() []*ShortTranscriptChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type TranscriptChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EpisodeId         string            `protobuf:"bytes,2,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	Summary           string            `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Transcript        string            `protobuf:"bytes,4,opt,name=transcript,proto3" json:"transcript,omitempty"`
	State             ContributionState `protobuf:"varint,6,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	Author            *Author           `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	CreatedAt         string            `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Merged            bool              `protobuf:"varint,9,opt,name=merged,proto3" json:"merged,omitempty"`
	PointsAwarded     float32           `protobuf:"fixed32,10,opt,name=points_awarded,json=pointsAwarded,proto3" json:"points_awarded,omitempty"`
	TranscriptVersion string            `protobuf:"bytes,11,opt,name=transcript_version,json=transcriptVersion,proto3" json:"transcript_version,omitempty"`
}

func (x *TranscriptChange) Reset() {
	*x = TranscriptChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptChange) ProtoMessage() {}

func (x *TranscriptChange) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptChange.ProtoReflect.Descriptor instead.
func (*TranscriptChange) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{35}
}

func (x *TranscriptChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TranscriptChange) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *TranscriptChange) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *TranscriptChange) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *TranscriptChange) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *TranscriptChange) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *TranscriptChange) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TranscriptChange) GetMerged() bool {
	if x != nil {
		return x.Merged
	}
	return false
}

func (x *TranscriptChange) GetPointsAwarded() float32 {
	if x != nil {
		return x.PointsAwarded
	}
	return 0
}

func (x *TranscriptChange) GetTranscriptVersion() string {
	if x != nil {
		return x.TranscriptVersion
	}
	return ""
}

type ShortTranscriptChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EpisodeId         string            `protobuf:"bytes,2,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	State             ContributionState `protobuf:"varint,6,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	Author            *Author           `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	CreatedAt         string            `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Merged            bool              `protobuf:"varint,9,opt,name=merged,proto3" json:"merged,omitempty"`
	PointsAwarded     float32           `protobuf:"fixed32,10,opt,name=points_awarded,json=pointsAwarded,proto3" json:"points_awarded,omitempty"`
	TranscriptVersion string            `protobuf:"bytes,11,opt,name=transcript_version,json=transcriptVersion,proto3" json:"transcript_version,omitempty"`
}

func (x *ShortTranscriptChange) Reset() {
	*x = ShortTranscriptChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortTranscriptChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortTranscriptChange) ProtoMessage() {}

func (x *ShortTranscriptChange) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortTranscriptChange.ProtoReflect.Descriptor instead.
func (*ShortTranscriptChange) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{36}
}

func (x *ShortTranscriptChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortTranscriptChange) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *ShortTranscriptChange) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *ShortTranscriptChange) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ShortTranscriptChange) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ShortTranscriptChange) GetMerged() bool {
	if x != nil {
		return x.Merged
	}
	return false
}

func (x *ShortTranscriptChange) GetPointsAwarded() float32 {
	if x != nil {
		return x.PointsAwarded
	}
	return 0
}

func (x *ShortTranscriptChange) GetTranscriptVersion() string {
	if x != nil {
		return x.TranscriptVersion
	}
	return ""
}

type RequestTranscriptChangeStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State           ContributionState `protobuf:"varint,2,opt,name=state,proto3,enum=rsk.ContributionState" json:"state,omitempty"`
	PointsOnApprove float32           `protobuf:"fixed32,3,opt,name=points_on_approve,json=pointsOnApprove,proto3" json:"points_on_approve,omitempty"`
}

func (x *RequestTranscriptChangeStateRequest) Reset() {
	*x = RequestTranscriptChangeStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTranscriptChangeStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTranscriptChangeStateRequest) ProtoMessage() {}

func (x *RequestTranscriptChangeStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTranscriptChangeStateRequest.ProtoReflect.Descriptor instead.
func (*RequestTranscriptChangeStateRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{37}
}

func (x *RequestTranscriptChangeStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestTranscriptChangeStateRequest) GetState() ContributionState {
	if x != nil {
		return x.State
	}
	return ContributionState_STATE_UNDEFINED
}

func (x *RequestTranscriptChangeStateRequest) GetPointsOnApprove() float32 {
	if x != nil {
		return x.PointsOnApprove
	}
	return 0
}

type GetTranscriptChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTranscriptChangeRequest) Reset() {
	*x = GetTranscriptChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTranscriptChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTranscriptChangeRequest) ProtoMessage() {}

func (x *GetTranscriptChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTranscriptChangeRequest.ProtoReflect.Descriptor instead.
func (*GetTranscriptChangeRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{38}
}

func (x *GetTranscriptChangeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTranscriptChangeDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTranscriptChangeDiffRequest) Reset() {
	*x = GetTranscriptChangeDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTranscriptChangeDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTranscriptChangeDiffRequest) ProtoMessage() {}

func (x *GetTranscriptChangeDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTranscriptChangeDiffRequest.ProtoReflect.Descriptor instead.
func (*GetTranscriptChangeDiffRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{39}
}

func (x *GetTranscriptChangeDiffRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TranscriptChangeDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs []string `protobuf:"bytes,2,rep,name=diffs,proto3" json:"diffs,omitempty"`
}

func (x *TranscriptChangeDiff) Reset() {
	*x = TranscriptChangeDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptChangeDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptChangeDiff) ProtoMessage() {}

func (x *TranscriptChangeDiff) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptChangeDiff.ProtoReflect.Descriptor instead.
func (*TranscriptChangeDiff) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{40}
}

func (x *TranscriptChangeDiff) GetDiffs() []string {
	if x != nil {
		return x.Diffs
	}
	return nil
}

type TranscriptDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranscriptMeta    *ShortTranscript `protobuf:"bytes,1,opt,name=transcript_meta,json=transcriptMeta,proto3" json:"transcript_meta,omitempty"`
	Dialog            []*Dialog        `protobuf:"bytes,2,rep,name=dialog,proto3" json:"dialog,omitempty"`
	MaxDialogPosition int32            `protobuf:"varint,3,opt,name=max_dialog_position,json=maxDialogPosition,proto3" json:"max_dialog_position,omitempty"`
}

func (x *TranscriptDialog) Reset() {
	*x = TranscriptDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptDialog) ProtoMessage() {}

func (x *TranscriptDialog) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptDialog.ProtoReflect.Descriptor instead.
func (*TranscriptDialog) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{41}
}

func (x *TranscriptDialog) GetTranscriptMeta() *ShortTranscript {
	if x != nil {
		return x.TranscriptMeta
	}
	return nil
}

func (x *TranscriptDialog) GetDialog() []*Dialog {
	if x != nil {
		return x.Dialog
	}
	return nil
}

func (x *TranscriptDialog) GetMaxDialogPosition() int32 {
	if x != nil {
		return x.MaxDialogPosition
	}
	return 0
}

type SetTranscriptRatingScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epid   string  `protobuf:"bytes,1,opt,name=epid,proto3" json:"epid,omitempty"`
	Score  float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Delete bool    `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *SetTranscriptRatingScoreRequest) Reset() {
	*x = SetTranscriptRatingScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTranscriptRatingScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTranscriptRatingScoreRequest) ProtoMessage() {}

func (x *SetTranscriptRatingScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTranscriptRatingScoreRequest.ProtoReflect.Descriptor instead.
func (*SetTranscriptRatingScoreRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{42}
}

func (x *SetTranscriptRatingScoreRequest) GetEpid() string {
	if x != nil {
		return x.Epid
	}
	return ""
}

func (x *SetTranscriptRatingScoreRequest) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SetTranscriptRatingScoreRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type BulkSetTranscriptRatingScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epid        string             `protobuf:"bytes,1,opt,name=epid,proto3" json:"epid,omitempty"`
	Scores      map[string]float32 `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	OauthSource string             `protobuf:"bytes,3,opt,name=oauth_source,json=oauthSource,proto3" json:"oauth_source,omitempty"`
}

func (x *BulkSetTranscriptRatingScoreRequest) Reset() {
	*x = BulkSetTranscriptRatingScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkSetTranscriptRatingScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkSetTranscriptRatingScoreRequest) ProtoMessage() {}

func (x *BulkSetTranscriptRatingScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkSetTranscriptRatingScoreRequest.ProtoReflect.Descriptor instead.
func (*BulkSetTranscriptRatingScoreRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{43}
}

func (x *BulkSetTranscriptRatingScoreRequest) GetEpid() string {
	if x != nil {
		return x.Epid
	}
	return ""
}

func (x *BulkSetTranscriptRatingScoreRequest) GetScores() map[string]float32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *BulkSetTranscriptRatingScoreRequest) GetOauthSource() string {
	if x != nil {
		return x.OauthSource
	}
	return ""
}

type BulkSetTranscriptTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epid string `protobuf:"bytes,1,opt,name=epid,proto3" json:"epid,omitempty"`
	Tags []*Tag `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *BulkSetTranscriptTagsRequest) Reset() {
	*x = BulkSetTranscriptTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkSetTranscriptTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkSetTranscriptTagsRequest) ProtoMessage() {}

func (x *BulkSetTranscriptTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkSetTranscriptTagsRequest.ProtoReflect.Descriptor instead.
func (*BulkSetTranscriptTagsRequest) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{44}
}

func (x *BulkSetTranscriptTagsRequest) GetEpid() string {
	if x != nil {
		return x.Epid
	}
	return ""
}

func (x *BulkSetTranscriptTagsRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcript_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_transcript_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_transcript_proto_rawDescGZIP(), []int{45}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

var File_transcript_proto protoreflect.FileDescriptor

var file_transcript_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x72, 0x73, 0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9f, 0x08, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x52,
	0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x55, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x52, 0x06, 0x74,
	0x72, 0x69, 0x76, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x5f, 0x70, 0x63, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x50, 0x63, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x65, 0x73, 0x74, 0x6f, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62,
	0x65, 0x73, 0x74, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3f,
	0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5e, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x22, 0xdb, 0x07, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x73, 0x79,
	0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x73, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x6f, 0x70, 0x73, 0x69, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x63, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x50, 0x63, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x73, 0x74, 0x6f, 0x66, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x65, 0x73, 0x74, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x31,
	0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xcd, 0x04, 0x0a, 0x06, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40,
	0x0a, 0x0a, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x41, 0x50, 0x10, 0x04,
	0x22, 0x62, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x22, 0x60, 0x0a, 0x06, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x70,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x74, 0x68, 0x52, 0x61, 0x77, 0x22, 0x35, 0x0a,
	0x0b, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2e, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x73, 0x6b, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x42, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x07, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x76, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xa0, 0x05, 0x0a, 0x16, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6e, 0x75, 0x6d,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1f, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3c, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x57, 0x0a, 0x17, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x15, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x0a, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x61, 0x77, 0x12, 0x28, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6c, 0x69,
	0x70, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x55, 0x72, 0x69, 0x12, 0x2b, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0xe0, 0x01,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x39, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x55, 0x0a, 0x15,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x1a, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x73, 0x6b, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x5b, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x97, 0x01,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x70, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4c, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x73, 0x6b,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0xe1, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72,
	0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x22, 0xa6, 0x02, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a,
	0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x2c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x3d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x73, 0x6b,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x06, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x06, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x23, 0x42,
	0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x70, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x50, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0x37, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x7f, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x4a,
	0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x09, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x03,
	0x2a, 0xba, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x56, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x32, 0xed, 0x25,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0x65, 0x92, 0x41, 0x44, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2b,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x2a, 0x0d, 0x67, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2f, 0x7b, 0x65, 0x70, 0x69, 0x64, 0x7d, 0x12, 0xc6, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x1f, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x77, 0x92, 0x41, 0x49, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x20, 0x61, 0x20, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x20, 0x62, 0x79, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x2a, 0x13, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x7b, 0x65,
	0x70, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x7b, 0x70, 0x6f, 0x73,
	0x7d, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x92, 0x41, 0x3b, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x2a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0xd5,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1a, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x01,
	0x92, 0x41, 0x64, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x42, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x2e, 0x2a,
	0x16, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0xd0, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0f, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x22, 0x84, 0x01, 0x92, 0x41, 0x55, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x2b, 0x47, 0x65, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x2a, 0x1e, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x2f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xeb, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x96,
	0x01, 0x92, 0x41, 0x55, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x35, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
	0x49, 0x44, 0x2e, 0x2a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12,
	0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x2f, 0x7b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1e,
	0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x7c, 0x92, 0x41, 0x4f, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x31, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x2a, 0x12, 0x67, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x2f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd5, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x7b, 0x92, 0x41, 0x45, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x23, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x2a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x2f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0xe9, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72,
	0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x92, 0x41, 0x4d, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x28, 0x6f, 0x72, 0x20,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x29, 0x20, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2e, 0x2a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x2f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x7b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe6, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x93, 0x01, 0x92, 0x41, 0x4c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2c, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2a, 0x14, 0x67, 0x65, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
	0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97,
	0x01, 0x92, 0x41, 0x4d, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x32, 0x3c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x65, 0x64, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd7, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x7f, 0x92, 0x41, 0x38, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x15,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x2a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x2f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x88, 0x02, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x92, 0x41, 0x53, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x62, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x2e, 0x2a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x32, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x65, 0x64, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbf, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x73, 0x6b,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x68, 0x92, 0x41, 0x47, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x26, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x2a, 0x15, 0x6c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0xb1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x62, 0x92, 0x41, 0x3c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x47, 0x65,
	0x74, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x2a, 0x13, 0x67, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xc3, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x23, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x22,
	0x68, 0x92, 0x41, 0x3d, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x47, 0x65,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x2a, 0x17, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x66, 0x66, 0x12, 0xc8, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x73, 0x92, 0x41, 0x48, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x2a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x7b, 0x65, 0x70, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x22, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x66, 0x92, 0x41, 0x3d, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x2a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x3a, 0x01, 0x2a, 0x32, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xaf, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x2e,
	0x72, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x59, 0x92, 0x41, 0x33, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x2a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xdf, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7d, 0x92, 0x41, 0x4e, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x27, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x20, 0x62, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x2e, 0x2a, 0x1c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x3a, 0x01, 0x2a, 0x32, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xd7, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x24, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x7d, 0x92, 0x41, 0x4c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x28,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x2a, 0x18, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x7b, 0x65, 0x70,
	0x69, 0x64, 0x7d, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0xf1, 0x01, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x28, 0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x8e, 0x01, 0x92, 0x41, 0x58, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x30, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2e, 0x2a, 0x1c, 0x62, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x1a, 0x28, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x7b, 0x65, 0x70, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x62, 0x75, 0x6c, 0x6b, 0x12, 0xc6, 0x01, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21,
	0x2e, 0x72, 0x73, 0x6b, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x72, 0x92, 0x41, 0x45, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x25, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x73, 0x20,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2e, 0x2a, 0x14, 0x62,
	0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x61, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x7b, 0x65,
	0x70, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x42, 0xa2, 0x01,
	0x92, 0x41, 0x71, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x72, 0x65, 0x0a,
	0x4c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x69, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x2e, 0x12, 0x15, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x70, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x77, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x73, 0x2f, 0x72, 0x73, 0x6b, 0x2d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transcript_proto_rawDescOnce sync.Once
	file_transcript_proto_rawDescData = file_transcript_proto_rawDesc
)

func file_transcript_proto_rawDescGZIP() []byte {
	file_transcript_proto_rawDescOnce.Do(func() {
		file_transcript_proto_rawDescData = protoimpl.X.CompressGZIP(file_transcript_proto_rawDescData)
	})
	return file_transcript_proto_rawDescData
}

var file_transcript_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_transcript_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_transcript_proto_goTypes = []interface{}{
	(ContributionState)(0),                       // 0: rsk.ContributionState
	(AudioQuality)(0),                            // 1: rsk.AudioQuality
	(MediaType)(0),                               // 2: rsk.MediaType
	(PublicationType)(0),                         // 3: rsk.PublicationType
	(Dialog_DialogType)(0),                       // 4: rsk.Dialog.DialogType
	(*Transcript)(nil),                           // 5: rsk.Transcript
	(*Media)(nil),                                // 6: rsk.Media
	(*ShortTranscript)(nil),                      // 7: rsk.ShortTranscript
	(*Dialog)(nil),                               // 8: rsk.Dialog
	(*Synopsis)(nil),                             // 9: rsk.Synopsis
	(*Trivia)(nil),                               // 10: rsk.Trivia
	(*GetTranscriptRequest)(nil),                 // 11: rsk.GetTranscriptRequest
	(*DialogRange)(nil),                          // 12: rsk.DialogRange
	(*GetTranscriptDialogRequest)(nil),           // 13: rsk.GetTranscriptDialogRequest
	(*ListTranscriptsRequest)(nil),               // 14: rsk.ListTranscriptsRequest
	(*TranscriptList)(nil),                       // 15: rsk.TranscriptList
	(*Ratings)(nil),                              // 16: rsk.Ratings
	(*ChunkStates)(nil),                          // 17: rsk.ChunkStates
	(*ChunkedTranscriptStats)(nil),               // 18: rsk.ChunkedTranscriptStats
	(*ChunkedTranscriptList)(nil),                // 19: rsk.ChunkedTranscriptList
	(*ChunkStats)(nil),                           // 20: rsk.ChunkStats
	(*GetTranscriptChunkRequest)(nil),            // 21: rsk.GetTranscriptChunkRequest
	(*Chunk)(nil),                                // 22: rsk.Chunk
	(*ListTranscriptChunksRequest)(nil),          // 23: rsk.ListTranscriptChunksRequest
	(*TranscriptChunkList)(nil),                  // 24: rsk.TranscriptChunkList
	(*ListChunkContributionsRequest)(nil),        // 25: rsk.ListChunkContributionsRequest
	(*ChunkContributionList)(nil),                // 26: rsk.ChunkContributionList
	(*ChunkContribution)(nil),                    // 27: rsk.ChunkContribution
	(*ShortChunkContribution)(nil),               // 28: rsk.ShortChunkContribution
	(*ChunkChunkContributionList)(nil),           // 29: rsk.ChunkChunkContributionList
	(*GetChunkContributionRequest)(nil),          // 30: rsk.GetChunkContributionRequest
	(*CreateChunkContributionRequest)(nil),       // 31: rsk.CreateChunkContributionRequest
	(*UpdateChunkContributionRequest)(nil),       // 32: rsk.UpdateChunkContributionRequest
	(*DeleteChunkContributionRequest)(nil),       // 33: rsk.DeleteChunkContributionRequest
	(*RequestChunkContributionStateRequest)(nil), // 34: rsk.RequestChunkContributionStateRequest
	(*CreateTranscriptChangeRequest)(nil),        // 35: rsk.CreateTranscriptChangeRequest
	(*ListTranscriptChangesRequest)(nil),         // 36: rsk.ListTranscriptChangesRequest
	(*UpdateTranscriptChangeRequest)(nil),        // 37: rsk.UpdateTranscriptChangeRequest
	(*DeleteTranscriptChangeRequest)(nil),        // 38: rsk.DeleteTranscriptChangeRequest
	(*TranscriptChangeList)(nil),                 // 39: rsk.TranscriptChangeList
	(*TranscriptChange)(nil),                     // 40: rsk.TranscriptChange
	(*ShortTranscriptChange)(nil),                // 41: rsk.ShortTranscriptChange
	(*RequestTranscriptChangeStateRequest)(nil),  // 42: rsk.RequestTranscriptChangeStateRequest
	(*GetTranscriptChangeRequest)(nil),           // 43: rsk.GetTranscriptChangeRequest
	(*GetTranscriptChangeDiffRequest)(nil),       // 44: rsk.GetTranscriptChangeDiffRequest
	(*TranscriptChangeDiff)(nil),                 // 45: rsk.TranscriptChangeDiff
	(*TranscriptDialog)(nil),                     // 46: rsk.TranscriptDialog
	(*SetTranscriptRatingScoreRequest)(nil),      // 47: rsk.SetTranscriptRatingScoreRequest
	(*BulkSetTranscriptRatingScoreRequest)(nil),  // 48: rsk.BulkSetTranscriptRatingScoreRequest
	(*BulkSetTranscriptTagsRequest)(nil),         // 49: rsk.BulkSetTranscriptTagsRequest
	(*Tag)(nil),                                  // 50: rsk.Tag
	nil,                                          // 51: rsk.Transcript.MetadataEntry
	nil,                                          // 52: rsk.ShortTranscript.MetadataEntry
	nil,                                          // 53: rsk.Dialog.MetadataEntry
	nil,                                          // 54: rsk.Ratings.ScoresEntry
	nil,                                          // 55: rsk.ChunkedTranscriptStats.ChunkContributionsEntry
	nil,                                          // 56: rsk.BulkSetTranscriptRatingScoreRequest.ScoresEntry
	(*Author)(nil),                               // 57: rsk.Author
	(*emptypb.Empty)(nil),                        // 58: google.protobuf.Empty
}
var file_transcript_proto_depIdxs = []int32{
	51, // 0: rsk.Transcript.metadata:type_name -> rsk.Transcript.MetadataEntry
	8,  // 1: rsk.Transcript.transcript:type_name -> rsk.Dialog
	9,  // 2: rsk.Transcript.synopses:type_name -> rsk.Synopsis
	10, // 3: rsk.Transcript.trivia:type_name -> rsk.Trivia
	1,  // 4: rsk.Transcript.audio_quality:type_name -> rsk.AudioQuality
	2,  // 5: rsk.Transcript.media_type:type_name -> rsk.MediaType
	6,  // 6: rsk.Transcript.media:type_name -> rsk.Media
	3,  // 7: rsk.Transcript.publication_type:type_name -> rsk.PublicationType
	16, // 8: rsk.Transcript.ratings:type_name -> rsk.Ratings
	50, // 9: rsk.Transcript.tags:type_name -> rsk.Tag
	9,  // 10: rsk.ShortTranscript.synopsis:type_name -> rsk.Synopsis
	52, // 11: rsk.ShortTranscript.metadata:type_name -> rsk.ShortTranscript.MetadataEntry
	1,  // 12: rsk.ShortTranscript.audio_quality:type_name -> rsk.AudioQuality
	2,  // 13: rsk.ShortTranscript.media_type:type_name -> rsk.MediaType
	6,  // 14: rsk.ShortTranscript.media:type_name -> rsk.Media
	3,  // 15: rsk.ShortTranscript.publication_type:type_name -> rsk.PublicationType
	4,  // 16: rsk.Dialog.type:type_name -> rsk.Dialog.DialogType
	53, // 17: rsk.Dialog.metadata:type_name -> rsk.Dialog.MetadataEntry
	12, // 18: rsk.GetTranscriptDialogRequest.range:type_name -> rsk.DialogRange
	7,  // 19: rsk.TranscriptList.episodes:type_name -> rsk.ShortTranscript
	54, // 20: rsk.Ratings.scores:type_name -> rsk.Ratings.ScoresEntry
	0,  // 21: rsk.ChunkStates.states:type_name -> rsk.ContributionState
	55, // 22: rsk.ChunkedTranscriptStats.chunk_contributions:type_name -> rsk.ChunkedTranscriptStats.ChunkContributionsEntry
	18, // 23: rsk.ChunkedTranscriptList.chunked:type_name -> rsk.ChunkedTranscriptStats
	22, // 24: rsk.TranscriptChunkList.chunks:type_name -> rsk.Chunk
	27, // 25: rsk.ChunkContributionList.contributions:type_name -> rsk.ChunkContribution
	0,  // 26: rsk.ChunkContribution.state:type_name -> rsk.ContributionState
	57, // 27: rsk.ChunkContribution.author:type_name -> rsk.Author
	0,  // 28: rsk.ShortChunkContribution.state:type_name -> rsk.ContributionState
	28, // 29: rsk.ChunkChunkContributionList.contributions:type_name -> rsk.ShortChunkContribution
	0,  // 30: rsk.UpdateChunkContributionRequest.state:type_name -> rsk.ContributionState
	0,  // 31: rsk.RequestChunkContributionStateRequest.request_state:type_name -> rsk.ContributionState
	0,  // 32: rsk.UpdateTranscriptChangeRequest.state:type_name -> rsk.ContributionState
	41, // 33: rsk.TranscriptChangeList.changes:type_name -> rsk.ShortTranscriptChange
	0,  // 34: rsk.TranscriptChange.state:type_name -> rsk.ContributionState
	57, // 35: rsk.TranscriptChange.author:type_name -> rsk.Author
	0,  // 36: rsk.ShortTranscriptChange.state:type_name -> rsk.ContributionState
	57, // 37: rsk.ShortTranscriptChange.author:type_name -> rsk.Author
	0,  // 38: rsk.RequestTranscriptChangeStateRequest.state:type_name -> rsk.ContributionState
	7,  // 39: rsk.TranscriptDialog.transcript_meta:type_name -> rsk.ShortTranscript
	8,  // 40: rsk.TranscriptDialog.dialog:type_name -> rsk.Dialog
	56, // 41: rsk.BulkSetTranscriptRatingScoreRequest.scores:type_name -> rsk.BulkSetTranscriptRatingScoreRequest.ScoresEntry
	50, // 42: rsk.BulkSetTranscriptTagsRequest.tags:type_name -> rsk.Tag
	17, // 43: rsk.ChunkedTranscriptStats.ChunkContributionsEntry.value:type_name -> rsk.ChunkStates
	11, // 44: rsk.TranscriptService.GetTranscript:input_type -> rsk.GetTranscriptRequest
	13, // 45: rsk.TranscriptService.GetTranscriptDialog:input_type -> rsk.GetTranscriptDialogRequest
	14, // 46: rsk.TranscriptService.ListTranscripts:input_type -> rsk.ListTranscriptsRequest
	58, // 47: rsk.TranscriptService.ListChunkedTranscripts:input_type -> google.protobuf.Empty
	58, // 48: rsk.TranscriptService.GetChunkedTranscriptChunkStats:input_type -> google.protobuf.Empty
	23, // 49: rsk.TranscriptService.ListTranscriptChunks:input_type -> rsk.ListTranscriptChunksRequest
	21, // 50: rsk.TranscriptService.GetTranscriptChunk:input_type -> rsk.GetTranscriptChunkRequest
	25, // 51: rsk.TranscriptService.ListChunkContributions:input_type -> rsk.ListChunkContributionsRequest
	31, // 52: rsk.TranscriptService.CreateChunkContribution:input_type -> rsk.CreateChunkContributionRequest
	30, // 53: rsk.TranscriptService.GetChunkContribution:input_type -> rsk.GetChunkContributionRequest
	32, // 54: rsk.TranscriptService.UpdateChunkContribution:input_type -> rsk.UpdateChunkContributionRequest
	33, // 55: rsk.TranscriptService.DeleteChunkContribution:input_type -> rsk.DeleteChunkContributionRequest
	34, // 56: rsk.TranscriptService.RequestChunkContributionState:input_type -> rsk.RequestChunkContributionStateRequest
	36, // 57: rsk.TranscriptService.ListTranscriptChanges:input_type -> rsk.ListTranscriptChangesRequest
	43, // 58: rsk.TranscriptService.GetTranscriptChange:input_type -> rsk.GetTranscriptChangeRequest
	44, // 59: rsk.TranscriptService.GetTranscriptChangeDiff:input_type -> rsk.GetTranscriptChangeDiffRequest
	35, // 60: rsk.TranscriptService.CreateTranscriptChange:input_type -> rsk.CreateTranscriptChangeRequest
	37, // 61: rsk.TranscriptService.UpdateTranscriptChange:input_type -> rsk.UpdateTranscriptChangeRequest
	38, // 62: rsk.TranscriptService.DeleteTranscriptChange:input_type -> rsk.DeleteTranscriptChangeRequest
	42, // 63: rsk.TranscriptService.RequestTranscriptChangeState:input_type -> rsk.RequestTranscriptChangeStateRequest
	47, // 64: rsk.TranscriptService.SetTranscriptRatingScore:input_type -> rsk.SetTranscriptRatingScoreRequest
	48, // 65: rsk.TranscriptService.BulkSetTranscriptRatingScore:input_type -> rsk.BulkSetTranscriptRatingScoreRequest
	49, // 66: rsk.TranscriptService.BulkSetTranscriptTags:input_type -> rsk.BulkSetTranscriptTagsRequest
	5,  // 67: rsk.TranscriptService.GetTranscript:output_type -> rsk.Transcript
	46, // 68: rsk.TranscriptService.GetTranscriptDialog:output_type -> rsk.TranscriptDialog
	15, // 69: rsk.TranscriptService.ListTranscripts:output_type -> rsk.TranscriptList
	19, // 70: rsk.TranscriptService.ListChunkedTranscripts:output_type -> rsk.ChunkedTranscriptList
	20, // 71: rsk.TranscriptService.GetChunkedTranscriptChunkStats:output_type -> rsk.ChunkStats
	24, // 72: rsk.TranscriptService.ListTranscriptChunks:output_type -> rsk.TranscriptChunkList
	22, // 73: rsk.TranscriptService.GetTranscriptChunk:output_type -> rsk.Chunk
	26, // 74: rsk.TranscriptService.ListChunkContributions:output_type -> rsk.ChunkContributionList
	27, // 75: rsk.TranscriptService.CreateChunkContribution:output_type -> rsk.ChunkContribution
	27, // 76: rsk.TranscriptService.GetChunkContribution:output_type -> rsk.ChunkContribution
	27, // 77: rsk.TranscriptService.UpdateChunkContribution:output_type -> rsk.ChunkContribution
	58, // 78: rsk.TranscriptService.DeleteChunkContribution:output_type -> google.protobuf.Empty
	27, // 79: rsk.TranscriptService.RequestChunkContributionState:output_type -> rsk.ChunkContribution
	39, // 80: rsk.TranscriptService.ListTranscriptChanges:output_type -> rsk.TranscriptChangeList
	40, // 81: rsk.TranscriptService.GetTranscriptChange:output_type -> rsk.TranscriptChange
	45, // 82: rsk.TranscriptService.GetTranscriptChangeDiff:output_type -> rsk.TranscriptChangeDiff
	40, // 83: rsk.TranscriptService.CreateTranscriptChange:output_type -> rsk.TranscriptChange
	40, // 84: rsk.TranscriptService.UpdateTranscriptChange:output_type -> rsk.TranscriptChange
	58, // 85: rsk.TranscriptService.DeleteTranscriptChange:output_type -> google.protobuf.Empty
	58, // 86: rsk.TranscriptService.RequestTranscriptChangeState:output_type -> google.protobuf.Empty
	58, // 87: rsk.TranscriptService.SetTranscriptRatingScore:output_type -> google.protobuf.Empty
	58, // 88: rsk.TranscriptService.BulkSetTranscriptRatingScore:output_type -> google.protobuf.Empty
	58, // 89: rsk.TranscriptService.BulkSetTranscriptTags:output_type -> google.protobuf.Empty
	67, // [67:90] is the sub-list for method output_type
	44, // [44:67] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_transcript_proto_init() }
func file_transcript_proto_init() {
	if File_transcript_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transcript_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transcript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortTranscript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Synopsis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trivia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTranscriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTranscriptDialogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTranscriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkedTranscriptStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkedTranscriptList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTranscriptChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTranscriptChunksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptChunkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChunkContributionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkContributionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkContribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortChunkContribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkChunkContributionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChunkContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChunkContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChunkContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChunkContributionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTranscriptChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTranscriptChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTranscriptChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTranscriptChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptChangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortTranscriptChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTranscriptChangeStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTranscriptChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTranscriptChangeDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptChangeDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTranscriptRatingScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkSetTranscriptRatingScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkSetTranscriptTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcript_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transcript_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transcript_proto_goTypes,
		DependencyIndexes: file_transcript_proto_depIdxs,
		EnumInfos:         file_transcript_proto_enumTypes,
		MessageInfos:      file_transcript_proto_msgTypes,
	}.Build()
	File_transcript_proto = out.File
	file_transcript_proto_rawDesc = nil
	file_transcript_proto_goTypes = nil
	file_transcript_proto_depIdxs = nil
}
