// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: search.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearchService_Search_FullMethodName            = "/rsk.SearchService/Search"
	SearchService_GetMetadata_FullMethodName       = "/rsk.SearchService/GetMetadata"
	SearchService_ListFieldValues_FullMethodName   = "/rsk.SearchService/ListFieldValues"
	SearchService_PredictSearchTerm_FullMethodName = "/rsk.SearchService/PredictSearchTerm"
	SearchService_GetRandomQuote_FullMethodName    = "/rsk.SearchService/GetRandomQuote"
	SearchService_ListSongs_FullMethodName         = "/rsk.SearchService/ListSongs"
	SearchService_ListChangelogs_FullMethodName    = "/rsk.SearchService/ListChangelogs"
	SearchService_GetRoadmap_FullMethodName        = "/rsk.SearchService/GetRoadmap"
)

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResultList, error)
	GetMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Metadata, error)
	ListFieldValues(ctx context.Context, in *ListFieldValuesRequest, opts ...grpc.CallOption) (*FieldValueList, error)
	PredictSearchTerm(ctx context.Context, in *PredictSearchTermRequest, opts ...grpc.CallOption) (*SearchTermPredictions, error)
	GetRandomQuote(ctx context.Context, in *GetRandomQuoteRequest, opts ...grpc.CallOption) (*RandomQuote, error)
	ListSongs(ctx context.Context, in *ListSongsRequest, opts ...grpc.CallOption) (*SongList, error)
	ListChangelogs(ctx context.Context, in *ListChangelogsRequest, opts ...grpc.CallOption) (*ChangelogList, error)
	GetRoadmap(ctx context.Context, in *GetRoadmapRequest, opts ...grpc.CallOption) (*Roadmap, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResultList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResultList)
	err := c.cc.Invoke(ctx, SearchService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Metadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metadata)
	err := c.cc.Invoke(ctx, SearchService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) ListFieldValues(ctx context.Context, in *ListFieldValuesRequest, opts ...grpc.CallOption) (*FieldValueList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FieldValueList)
	err := c.cc.Invoke(ctx, SearchService_ListFieldValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) PredictSearchTerm(ctx context.Context, in *PredictSearchTermRequest, opts ...grpc.CallOption) (*SearchTermPredictions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTermPredictions)
	err := c.cc.Invoke(ctx, SearchService_PredictSearchTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetRandomQuote(ctx context.Context, in *GetRandomQuoteRequest, opts ...grpc.CallOption) (*RandomQuote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RandomQuote)
	err := c.cc.Invoke(ctx, SearchService_GetRandomQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) ListSongs(ctx context.Context, in *ListSongsRequest, opts ...grpc.CallOption) (*SongList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SongList)
	err := c.cc.Invoke(ctx, SearchService_ListSongs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) ListChangelogs(ctx context.Context, in *ListChangelogsRequest, opts ...grpc.CallOption) (*ChangelogList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangelogList)
	err := c.cc.Invoke(ctx, SearchService_ListChangelogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetRoadmap(ctx context.Context, in *GetRoadmapRequest, opts ...grpc.CallOption) (*Roadmap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Roadmap)
	err := c.cc.Invoke(ctx, SearchService_GetRoadmap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations should embed UnimplementedSearchServiceServer
// for forward compatibility.
type SearchServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResultList, error)
	GetMetadata(context.Context, *emptypb.Empty) (*Metadata, error)
	ListFieldValues(context.Context, *ListFieldValuesRequest) (*FieldValueList, error)
	PredictSearchTerm(context.Context, *PredictSearchTermRequest) (*SearchTermPredictions, error)
	GetRandomQuote(context.Context, *GetRandomQuoteRequest) (*RandomQuote, error)
	ListSongs(context.Context, *ListSongsRequest) (*SongList, error)
	ListChangelogs(context.Context, *ListChangelogsRequest) (*ChangelogList, error)
	GetRoadmap(context.Context, *GetRoadmapRequest) (*Roadmap, error)
}

// UnimplementedSearchServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchServiceServer struct{}

func (UnimplementedSearchServiceServer) Search(context.Context, *SearchRequest) (*SearchResultList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchServiceServer) GetMetadata(context.Context, *emptypb.Empty) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedSearchServiceServer) ListFieldValues(context.Context, *ListFieldValuesRequest) (*FieldValueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFieldValues not implemented")
}
func (UnimplementedSearchServiceServer) PredictSearchTerm(context.Context, *PredictSearchTermRequest) (*SearchTermPredictions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictSearchTerm not implemented")
}
func (UnimplementedSearchServiceServer) GetRandomQuote(context.Context, *GetRandomQuoteRequest) (*RandomQuote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomQuote not implemented")
}
func (UnimplementedSearchServiceServer) ListSongs(context.Context, *ListSongsRequest) (*SongList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSongs not implemented")
}
func (UnimplementedSearchServiceServer) ListChangelogs(context.Context, *ListChangelogsRequest) (*ChangelogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChangelogs not implemented")
}
func (UnimplementedSearchServiceServer) GetRoadmap(context.Context, *GetRoadmapRequest) (*Roadmap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoadmap not implemented")
}
func (UnimplementedSearchServiceServer) testEmbeddedByValue() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetMetadata(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_ListFieldValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFieldValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).ListFieldValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_ListFieldValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).ListFieldValues(ctx, req.(*ListFieldValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_PredictSearchTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictSearchTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).PredictSearchTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_PredictSearchTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).PredictSearchTerm(ctx, req.(*PredictSearchTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetRandomQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetRandomQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetRandomQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetRandomQuote(ctx, req.(*GetRandomQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_ListSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).ListSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_ListSongs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).ListSongs(ctx, req.(*ListSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_ListChangelogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangelogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).ListChangelogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_ListChangelogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).ListChangelogs(ctx, req.(*ListChangelogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetRoadmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetRoadmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetRoadmap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetRoadmap(ctx, req.(*GetRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rsk.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _SearchService_GetMetadata_Handler,
		},
		{
			MethodName: "ListFieldValues",
			Handler:    _SearchService_ListFieldValues_Handler,
		},
		{
			MethodName: "PredictSearchTerm",
			Handler:    _SearchService_PredictSearchTerm_Handler,
		},
		{
			MethodName: "GetRandomQuote",
			Handler:    _SearchService_GetRandomQuote_Handler,
		},
		{
			MethodName: "ListSongs",
			Handler:    _SearchService_ListSongs_Handler,
		},
		{
			MethodName: "ListChangelogs",
			Handler:    _SearchService_ListChangelogs_Handler,
		},
		{
			MethodName: "GetRoadmap",
			Handler:    _SearchService_GetRoadmap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}
