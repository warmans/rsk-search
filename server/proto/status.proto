syntax = "proto3";

package rsk;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/warmans/rsk-search/server/gen/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://scrimpton.com";
    description: "Status service has endpoints for determining the status of the service.";
  };
  schemes: HTTP;
};
service StatusService {

  rpc Health(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      custom: {
        kind: "HEAD",
        path: "/api/status/health"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getHealth",
      summary: "Just return 200 if the API is up"
      tags: "search"
    };
  }

  rpc GetQuotaSummary(google.protobuf.Empty) returns (Quotas) {
    option (google.api.http) = {
      get: "/api/status/quotas"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getQuotaSummary",
      summary: "Get summary of the service quotas"
      tags: "search"
    };
  }
}

message Quotas {
  float bandwidth_total_mib = 1;
  float bandwidth_remaining_mib = 2;
}
